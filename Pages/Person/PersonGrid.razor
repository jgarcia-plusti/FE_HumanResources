@page "/persongrid"
@using System.Net.Http.Headers
@using FE_HumanResources.Models
@using FE_HumanResources.Entities
@inject ILocalStorageService LocalStorage
@inject ContextMenuService ContextMenuService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http


    <RadzenBreadCrumb>
        <Template Context="item">
            <RadzenBadge Text="@item.Text" IsPill="true" />
        </Template>
        <ChildContent>
            <RadzenBreadCrumbItem Path="/" Text="Persona" />
            <RadzenBreadCrumbItem Path="/persongrid" Text="Lista de Personas" />
        </ChildContent>
    </RadzenBreadCrumb>

    <br />
    @if (MenuActions.Where(w => w.Name == "Crear").FirstOrDefault().Allowed == true)
    {
        <RadzenButton Text="Crear" Click="@Create" ButtonStyle="ButtonStyle.Primary" />
    }
    <RadzenButton Text="Refrescar Lista" Click="@Reset" ButtonStyle="ButtonStyle.Secondary" />
    <br />
    <br />
    <RadzenDataGrid AllowFiltering="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced"
                    AllowSorting="true" PageSize="15" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@PersonEntity" LogicalFilterOperator="LogicalFilterOperator.Or" TItem="PersonEntity"
                    SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedPerson CellContextMenu="@OnCellContextMenu"
                    ColumnWidth="300px">
        <Columns>
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="Name" Title="Primer Nombre" Frozen="true" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="SecoundName" Title="Segundo Nombre" Frozen="true" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="LastName" Title="Primer Apellido" Frozen="true" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="SecoundLastname" Title="Segundo Apellido" Frozen="true" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="DateOfBirth" Title="Fecha de Nacimiento" FormatString="{0:d}" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="Gender" Title="Sexo" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="Identification" Title="DPI" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="CountryDeparmetName" Title="Departamento" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="MunicipalityName" Title="Monicipio" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="CountryName" Title="País" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="MaritalStatus" Title="Estado Civil" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="BloodType" Title="Tipo sanguíneo" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="SignLanguage" Title="¿Sabe el lenguaje de señas?" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="Religion" Title="Religión" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="HasReligiousPosition" Title="¿Tiene algún cargo religioso?" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="ReligiousPosition" Title="¿Cuál cargo religioso?" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="Town" Title="Pueblo" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="LinguisticCommunity" Title="Comunidad lingüística" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="Passport" Title="Número de pasaporte" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="NIT" Title="NIT" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="IgssAffiliation" Title="Afiliación IGSS" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="Phone" Title="teléfono" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="Email" Title="Correo personal" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="InstitutionalEmail" Title="Correo institucional" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="NamePrivateDoctor" Title="Nombre de médico particular" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="ClinicDoctor" Title="Número de médico particular" />.
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="Profession" Title="Profesión" />
            <RadzenDataGridColumn TItem="PersonEntity" Width="200px" Property="Craft" Title="Oficio" />
        </Columns>
    </RadzenDataGrid>

@code {
    private PersonEntity user = new PersonEntity();
    private IEnumerable<PersonEntity> PersonEntity;
    private IList<PersonEntity> selectedPerson;
    string? jwt;
    private IEnumerable<MenuEntity> MenuEntities;
    List<MenuActionsEntity> MenuActions;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Reset();
    }

    private async Task Reset()
    {
        jwt = await LocalStorage.GetItemAsync<string>("jwt");

        string permiss = await LocalStorage.GetItemAsync<string>("Permissions");

        if (!string.IsNullOrEmpty(permiss))
        {
            MenuEntities = JsonConvert.DeserializeObject<IEnumerable<MenuEntity>>(permiss);

            MenuActions = MenuEntities.Where(w => w.Name == "Personas").FirstOrDefault()
                    .SubMenus.Where(z => z.Name == "Lista de Personas").FirstOrDefault().MenuActions.ToList();
        }

        if (!string.IsNullOrEmpty(jwt))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            HttpResponseMessage response = await Http.GetAsync("api/Person/GetAll");
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                PersonEntity = JsonConvert.DeserializeObject<IEnumerable<PersonEntity>>(content);
                if (PersonEntity == null)
                {
                    showError("Error al cargar Empleados");
                }
                else
                {
                    selectedPerson = PersonEntity.Take(1).ToList();
                }
            }
            else
            {
                await LocalStorage.ClearAsync();
                NavigationManager.NavigateTo("login", true);
            }
        }
        else
        {
            await LocalStorage.ClearAsync();
            NavigationManager.NavigateTo("login", true);
        }
    }

    void Create()
    {
        NavigationManager.NavigateTo($"person");
    }

    async Task OnCellContextMenu(DataGridCellMouseEventArgs<PersonEntity> args)
    {
        selectedPerson = new List<PersonEntity>() { args.Data };

        var contextMenuItems = new List<ContextMenuItem>();

        foreach (MenuActionsEntity e in MenuActions.Where(w => w.Allowed == true && w.Name != "Crear").ToList().OrderBy(o => o.Order))
        {
            contextMenuItems.Insert(0, new ContextMenuItem() { Text = e.Name, Value = e.Value, Icon = e.Icon });
        }

        ContextMenuService.Open(args,
            contextMenuItems,
            (e) =>
            {
                if (e.Value.ToString() == "1")
                {

                }
                else if (e.Value.ToString() == "2")
                {
                    NavigationManager.NavigateTo($"person/{args.Data.Uuid}");
                }
                else if (e.Value.ToString() == "4")
                {
                    NavigationManager.NavigateTo($"historicPerson/{args.Data.Uuid}-{args.Data.Name}");
                }
                else if (e.Value.ToString() == "3")
                {
                    ShowInlineDialog(args.Data.Uuid);
                }
            }
         );
    }

    async Task ShowInlineDialog(string Uuid)
    {
        var result = await DialogService.OpenAsync("Eliminar", ds =>
        @<RadzenStack Gap="1.5rem">
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="Cancelar" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Danger" />
                </RadzenStack>
                <RadzenButton Text="Ok" Click="() => { ds.Close(true); Delete(Uuid); }" Style="width: 80px;" />
            </RadzenStack>
        </RadzenStack>
        );
    }

    private async Task Delete(string Uuid)
    {
        if (!string.IsNullOrEmpty(jwt))
        {
            string uuidUserAction = await LocalStorage.GetItemAsync<string>("uuidUser");
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            HttpResponseMessage response = await Http.PostAsJsonAsync("api/Person/Delete", new PayloadGeneric()
                {
                    Uuid = Uuid,
                    payload = new { Uuid = Uuid }
                });

            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                ResponseGeneric result = JsonConvert.DeserializeObject<ResponseGeneric>(content);
                showInfo(result.message);
                await Reset();
            }
            else
            {
                showError("Error al intentar eliminar el registro!");
            }
        }
    }

    private void showError(string messageInfo = null)
    {
        if (string.IsNullOrEmpty(messageInfo))
            messageInfo = $"Error al intentar obtener datos del servidor!";

        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = messageInfo,
                Duration = 4000
            });
    }

    private void showInfo(string msg)
    {
        string messageInfo = msg;
        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Info,
                Summary = messageInfo,
                Duration = 4000
            });
    }
}
