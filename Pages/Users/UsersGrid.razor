@page "/usersgrid"
@using System.Net.Http.Headers
@using FE_HumanResources.Models
@using FE_HumanResources.Entities
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject ContextMenuService ContextMenuService

<RadzenBody Gap="1rem" Class="rz-p-sm-12" Style="height:100vh; overflow-y:auto;">
    <RadzenBreadCrumb>
        <Template Context="item">
            <RadzenBadge Text="@item.Text" IsPill="true" />
        </Template>
        <ChildContent>
            <RadzenBreadCrumbItem Path="/" Text="Usuarios" />
            <RadzenBreadCrumbItem Path="/usersgrid" Text="Lista de Usuarios" />
        </ChildContent>
    </RadzenBreadCrumb>
    <br>
    <RadzenButton Text="Actualizar" Click="@Reset" Style="margin-bottom: 20px;" />
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
        FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="10" AllowPaging="true"
        PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" Data="@UserEntity" TItem="UserEntity"
        ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or"
        SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedUser CellContextMenu="@OnCellContextMenu"
        FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
        <Columns>
            <RadzenDataGridColumn TItem="UserEntity" Property="UserName" Title="Nombre" Frozen="true" Width="80px"
                TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="UserEntity" Property="LastName" Title="Apellido" Frozen="true" Width="160px" />
            <RadzenDataGridColumn TItem="UserEntity" Property="Identification" Title="Identificación" Width="160px" />
            <RadzenDataGridColumn TItem="UserEntity" Property="Phone" Title="Teléfono" FormatString="{0:d}"
                Width="200px" />
            <RadzenDataGridColumn TItem="UserEntity" Property="Email" Title="Correo" Width="300px" />
        </Columns>
    </RadzenDataGrid>
</RadzenBody>


@code {
    private UserEntity user = new UserEntity();
    private IEnumerable<UserEntity> UserEntity;
    private IList<UserEntity> selectedUser;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Reset();
    }

    private async Task Reset()
    {
        string? jwt = await LocalStorage.GetItemAsync<string>("jwt");
        if (!string.IsNullOrEmpty(jwt))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            HttpResponseMessage response = await Http.GetAsync("api/User/GetAll");
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                UserEntity = JsonConvert.DeserializeObject<IEnumerable<UserEntity>>(content);
                if (UserEntity == null)
                {

                }
                else
                    selectedUser = UserEntity.Take(1).ToList();
            }
            else
            {
                await LocalStorage.ClearAsync();
                NavigationManager.NavigateTo("login", true);
            }
        }
        else
        {
            await LocalStorage.ClearAsync();
            NavigationManager.NavigateTo("login", true);
        }
    }

    void OnCellContextMenu(DataGridCellMouseEventArgs<UserEntity> args)
    {
        selectedUser = new List<UserEntity>() { args.Data };

        ContextMenuService.Open(args,
        new List<ContextMenuItem> {
            new ContextMenuItem(){ Text = "Editar", Value = 1, Icon = "search" },
            new ContextMenuItem(){ Text = "Ver Histórico del Registro", Value = 2, Icon = "home" },
            new ContextMenuItem(){ Text = "Eliminar", Value = 3, Icon = "info" },
        },
        (e) =>
        {
            if (e.Value.ToString() == "1")
            {
                NavigationManager.NavigateTo($"/User/{args.Data.Uuid}");
            }
            else if (e.Value.ToString() == "2")
            {
                NavigationManager.NavigateTo($"/historicusergrid/{args.Data.Uuid}-{args.Data.UserName}");
            }
        }
        );
    }
}
