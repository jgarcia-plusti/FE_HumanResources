@page "/perfil"
@using FE_HumanResources.Entities
@using FE_HumanResources.Models
@using System.Net.Http.Headers
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject HttpClient Http
<RadzenBody Gap="1rem" Class="rz-p-sm-12">
    <RadzenBreadCrumb>
        <Template Context="item">
            <RadzenBadge Text="@item.Text" IsPill="true" />
        </Template>
        <ChildContent>
            <RadzenBreadCrumbItem Path="/" Text="Usuarios" />
            <RadzenBreadCrumbItem Path="/usersgrid" Text="Mi Perfil" />
        </ChildContent>
    </RadzenBreadCrumb>
    <RadzenTemplateForm Data="@userEntity" Submit="@((UserEntity args) => { UpdateUser(args); })">
        <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenStack>
                    <RadzenFieldset Text="Información de Usuario">
                        <RadzenStack Gap="1rem">

                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Nombres" Component="Name" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" Name="Name" @bind-Value="userEntity.UserName" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Apellidos" Component="LastName" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" Name="LastName"
                                        @bind-Value="userEntity.LastName" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Doc. Identificación" Component="Identification" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Disabled="true" Style="width: 100%;" Name="Identification" @bind-Value="userEntity.Identification" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Dirección" Component="Adress" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" Name="Adress" @bind-Value="userEntity.Adress" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Género" Component="Gender" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenDropDown @bind-Value="userEntity.Gender" Placeholder="Femenino"
                                        Data="@genders" Style="width: 100%;" TextProperty="GenderName"
                                        ValueProperty="GenderName" Name="Gender">
                                    </RadzenDropDown>
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Teléfono" Component="Phone" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenNumeric Style="width: 100%;" Name="Phone" @bind-Value="userEntity.Phone" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Fecha de Nacimiento" Component="DateOfBirth"
                                        Style="margin-right: 8px; vertical-align: middle;" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenDatePicker @bind-Value="userEntity.DateOfBirth" Name="DateOfBirth"
                                        ShowCalendarWeek />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="País" Component="Country" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" Name="Country"
                                        @bind-Value="userEntity.Country" />
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenFieldset>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenStack>
                    <RadzenFieldset Text="Información para la Empresa">
                        <RadzenStack Gap="1rem">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Correo" Component="Email" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                     <RadzenTextBox Disabled="true" Style="width: 100%;" Name="Email" @bind-Value="userEntity.Email" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Tipo de Usuario (Rol)" Component="Role" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                     <RadzenDropDown Disabled="true" @bind-Value="userEntity.UuidRole" Data="@roles" Style="width: 100%;"
                                        TextProperty="Name" ValueProperty="Uuid" Name="Role">
                                    </RadzenDropDown>
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Usuario Activo" Component="Active" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                     <RadzenSwitch Disabled="true" Name="Active" @bind-Value="userEntity.Active"
                                        InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Switch value" }})" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Contraseña" Component="Password" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenPassword Name="Password" @bind-Value="userEntity.Password"
                                        aria-label="enter password" />
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenFieldset>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem"
            Class="rz-mt-8 rz-mb-4">
            <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Guardar" />
             <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="arrow_back"
                Text="Regresar" Click="@ReturnMenu" />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenBody>



 @code {
    private UserEntity userEntity = new UserEntity();
    private ICollection<RoleEntity> roles;

    List<dynamic> genders = new List<dynamic>()
    {
        new { GenderName = "Masculino" },
        new { GenderName = "Femenino" },
        new { GenderName = "Otro" }
    };

    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
        string? uuidUserLogged = await LocalStorage.GetItemAsync<string>("uuidUser");
        string? jwt = await LocalStorage.GetItemAsync<string>("jwt");

        if (!string.IsNullOrEmpty(uuidUserLogged) && !string.IsNullOrEmpty(jwt))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            HttpResponseMessage response = await Http.GetAsync("api/Catalogs/Roles");
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                roles = JsonConvert.DeserializeObject<ICollection<RoleEntity>>(content);
                if (roles == null)
                    showError();
            }

            response = await Http.PostAsJsonAsync("api/User/GetProfile", new PayloadGeneric()
            {
                Uuid = uuidUserLogged
            });

            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                userEntity = JsonConvert.DeserializeObject<UserEntity>(content);
                showInfo("Datos cargados!");
            }
            else
            {
                await LocalStorage.ClearAsync();
                NavigationManager.NavigateTo("login", true);
            }

        }
        else
        {
            await LocalStorage.ClearAsync();
            NavigationManager.NavigateTo("login", true);
        }
    }

    private async void UpdateUser(UserEntity UserEntity)
    {
        string? jwt = await LocalStorage.GetItemAsync<string>("jwt");
        string? uuidUserLoged = await LocalStorage.GetItemAsync<string>("uuidUser");

        if (UserEntity != null && !string.IsNullOrEmpty(jwt))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            HttpResponseMessage response = await Http.PostAsJsonAsync("api/User/UpdateUser", new PayloadGeneric()
                {
                    Uuid = uuidUserLoged!,
                    payload = UserEntity
                });
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                UserEntity? updatedUser = JsonConvert.DeserializeObject<UserEntity>(content);
                if (updatedUser != null)
                {
                    UserEntity = updatedUser;
                    showInfo("Se actualiza la información con éxito");
                }
            }
        }
    }

    private void ReturnMenu()
    {
        NavigationManager.NavigateTo($"dashboard", true);
    }

    private void showError()
    {
        string messageInfo = $"Error al intentar obtener datos del servidor!";
        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = messageInfo,
                Duration = 4000
            });
    }

    private void showInfo(string msg)
    {
        string messageInfo = msg;
        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Info,
                Summary = messageInfo,
                Duration = 4000
            });
    }

}
