@page "/CreatePaymentConfig"
@using System.Net.Http.Headers
@using FE_HumanResources.Models
@using FE_HumanResources.Entities
@inject ILocalStorageService LocalStorage
@inject ContextMenuService ContextMenuService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject HttpClient Http

    <RadzenBreadCrumb>
        <Template Context="item">
            <RadzenBadge Text="@item.Text" IsPill="true" />
        </Template>
        <ChildContent>
            <RadzenBreadCrumbItem Path="/" Text="Pagos / Planilla" />
            <RadzenBreadCrumbItem Path="/CreatePaymentConfig" Text="Crear Configuración de Planilla" />
        </ChildContent>
    </RadzenBreadCrumb>
    <RadzenTemplateForm Data="@paymentConfigurationEntity" Submit="@((PaymentConfigurationEntity args) => { Create(args); })">
        <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
            <RadzenColumn Size="12" SizeMD="12">
                <RadzenStack>
                    <RadzenFieldset Text="Configuración de Planilla">
                        <RadzenStack Gap="1rem">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="2">
                                    <RadzenLabel Text="Nombre para la Configuración" Component="description" />
                                </RadzenColumn>
                                <RadzenColumn Size="4">
                                    <RadzenTextBox Name="description" @bind-Value="paymentConfigurationEntity.Description" />
                                </RadzenColumn>
                                <RadzenColumn Size="2">
                                    <RadzenLabel Text="País" Component="contry" />
                                </RadzenColumn>
                                <RadzenColumn Size="4">
                                    <RadzenDropDown @bind-Value="paymentConfigurationEntity.UuidCountry" Data="@Countries"
                                                    TextProperty="Name" ValueProperty="Uuid" Name="contry">
                                    </RadzenDropDown>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenFieldset>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
            <RadzenFieldset Text="Agregar Detalle">
                <RadzenColumn Size="12" SizeMD="12">
                    <RadzenStack Gap="1rem">

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn>
                                <RadzenLabel Text="Descripción" Component="descriptiondet" />
                            </RadzenColumn>
                            <RadzenColumn>
                                <RadzenTextBox Name="descriptiondet" @bind-Value="DetailToAdd.Description" />
                            </RadzenColumn>

                            <RadzenColumn>
                                <RadzenLabel Text="Tipo de Calculo" Component="CalculationTypes" />
                            </RadzenColumn>
                            <RadzenColumn>
                                <RadzenDropDown @bind-Value="DetailToAdd.CalculationType" Data="@CalculationTypes"
                                                TextProperty="Name" ValueProperty="Name" Name="CalculationTypes">
                                </RadzenDropDown>
                            </RadzenColumn>

                            <RadzenColumn>
                                <RadzenLabel Text="Monto" Component="amount" />
                            </RadzenColumn>
                            <RadzenColumn>
                                <RadzenNumeric Name="amount" @bind-Value="DetailToAdd.Amount" />
                            </RadzenColumn>
                            
                            <RadzenColumn>
                                <RadzenLabel Text="Tipo de Acumulación" Component="AccumulationTypes" />
                            </RadzenColumn>
                            <RadzenColumn>
                                <RadzenDropDown @bind-Value="DetailToAdd.AccumulationType" Data="@AccumulationTypes"
                                                TextProperty="Name" ValueProperty="Name" Name="AccumulationTypes">
                                </RadzenDropDown>
                            </RadzenColumn>
                            @if (DetailToAdd.CalculationType == "Monto Fijo")
                            {
                                <RadzenColumn>
                                    <RadzenLabel Text="Aplica Descuento de ISR?" />
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenSwitch @bind-Value="DetailToAdd.IsrDiscount" />
                                </RadzenColumn>
                            }
                        </RadzenRow>

                        <RadzenRow AlignItems="AlignItems.Center">
                            @if (DetailToAdd.CalculationType == "ISR")
                            {
                                <RadzenColumn>
                                    <RadzenLabel Text="Salario anual desde" Component="amountFrom" />
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenNumeric Name="amountFrom" @bind-Value="DetailToAdd.AmountFrom" />
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenLabel Text="Salario anual hasta" Component="amountTo" />
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenNumeric Name="amountTo" @bind-Value="DetailToAdd.AmountTo" />
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenLabel Text="Porcentaje Exedente" Component="AmountOutstanding" />
                                </RadzenColumn>
                                <RadzenColumn>
                                    <RadzenNumeric Name="AmountOutstanding" @bind-Value="DetailToAdd.AmountOutstanding" />
                                </RadzenColumn>
                            }
                        </RadzenRow>
                    </RadzenStack>
                </RadzenColumn>
                <RadzenRow>
                    <RadzenButton Click="@AddDetail" Text="Agregar" Icon="add" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" />

                </RadzenRow>
            </RadzenFieldset>
            <RadzenFieldset Text="Detalles de la configuración de Planilla">
                <RadzenRow AlignItems="AlignItems.Center">

                    <RadzenDataGrid AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple"
                                    AllowFiltering="true" AllowPaging="true" AllowSorting="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    FilterPopupRenderMode="PopupRenderMode.OnDemand"
                                    Data="@ListDetails">
                        <Columns>
                            <RadzenDataGridColumn TItem="PaymentConfigurationDetailEntity" Property="Description" Title="Descripción" />
                            <RadzenDataGridColumn TItem="PaymentConfigurationDetailEntity" Property="Amount" Title="Monto" />
                            <RadzenDataGridColumn TItem="PaymentConfigurationDetailEntity" Property="CalculationType" Title="Tipo de Calculo" />
                            <RadzenDataGridColumn TItem="PaymentConfigurationDetailEntity" Property="AccumulationType" Title="Tipo de Acumulación" />
                            <RadzenDataGridColumn TItem="PaymentConfigurationDetailEntity" Property="AmountFrom" Title="Monto Desde" />
                            <RadzenDataGridColumn TItem="PaymentConfigurationDetailEntity" Property="AmountTo" Title="Monto Hasta" />
                            <RadzenDataGridColumn TItem="PaymentConfigurationDetailEntity" Property="AmountOutstanding" Title="Porcentaje Exedente" />
                            <RadzenDataGridColumn TItem="PaymentConfigurationDetailEntity" Property="IsrDiscount" Title="Aplica Descuento ISR" />
                            <RadzenDataGridColumn TItem="PaymentConfigurationDetailEntity" Property="Uuid" Title="Remover">
                                <Template Context="data">
                                    <RadzenButton Click="@(() => RemoveToDetail(data))" Icon="delete" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Small" />
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </RadzenRow>
            </RadzenFieldset>
        </RadzenRow>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem"
                     Class="rz-mt-8 rz-mb-4">
            <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Guardar" />
            <RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="arrow_back"
                          Text="Cancelar" Click="@ReturnMenu" />
        </RadzenStack>

    </RadzenTemplateForm>


@code {

    string? jwt;
    PaymentConfigurationEntity paymentConfigurationEntity = new PaymentConfigurationEntity();
    PaymentConfigurationDetailEntity DetailToAdd = new PaymentConfigurationDetailEntity();
    List<PaymentConfigurationDetailEntity> ListDetails = new List<PaymentConfigurationDetailEntity>();
    ICollection<CountriesEntity> Countries;
    List<dynamic> CalculationTypes = new List<dynamic>()
    {
        new { Name = "Porcentaje del Salario" },
        new { Name = "Monto Fijo" },
        new { Name = "ISR" },
    };

    List<dynamic> AccumulationTypes = new List<dynamic>()
    {
        new { Name = "Acumula" },
        new { Name = "Descuenta" },
    };

    protected override async Task OnInitializedAsync()
    {
        StateHasChanged();
        await base.OnInitializedAsync();

        jwt = await LocalStorage.GetItemAsync<string>("jwt");

        if (!string.IsNullOrEmpty(jwt))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            HttpResponseMessage response;
            response = await Http.GetAsync("api/Catalogs/Countries");
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                Countries = JsonConvert.DeserializeObject<ICollection<CountriesEntity>>(content);
                if (Countries == null)
                    showError();
            }
        }
    }

    void AddDetail()
    {
        DetailToAdd.Uuid = "";
        ListDetails.Add(DetailToAdd);
        DetailToAdd = new PaymentConfigurationDetailEntity();
        ListDetails = new List<PaymentConfigurationDetailEntity>(ListDetails);
        StateHasChanged();
    }

    void RemoveToDetail(PaymentConfigurationDetailEntity arg)
    {
        ListDetails.Remove(arg);
        ListDetails = new List<PaymentConfigurationDetailEntity>(ListDetails);
        StateHasChanged();
    }

    protected async Task Create(PaymentConfigurationEntity args)
    {
        this.paymentConfigurationEntity.Details = this.ListDetails;

        if (!string.IsNullOrEmpty(jwt))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);

            HttpResponseMessage response;
            paymentConfigurationEntity.Uuid = "";
            response = await Http.PostAsJsonAsync("api/Payments/SavePaymentConfig", this.paymentConfigurationEntity);

            if (response.IsSuccessStatusCode)
            {
                showInfo("Configuración de Planilla creada correctamente!");
                NavigationManager.NavigateTo($"PaymentConfigGrid");
            }
            else
                showError();

        }


    }

    public void ReturnMenu()
    {
        NavigationManager.NavigateTo($"PaymentConfigGrid");
    }

    private void showError(string messageInfo = null)
    {
        if (string.IsNullOrEmpty(messageInfo))
            messageInfo = $"Error desde el servidor!";

        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = messageInfo,
                Duration = 4000
            });
    }

    private void showInfo(string msg)
    {
        string messageInfo = msg;
        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Info,
                Summary = messageInfo,
                Duration = 4000
            });
    }
}
