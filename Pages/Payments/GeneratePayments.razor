@page "/GeneratePayment"
@using System.Net.Http.Headers
@using FE_HumanResources.Models
@using FE_HumanResources.Entities
@inject ILocalStorageService LocalStorage
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject HttpClient Http

<RadzenBody Gap="1rem" Class="rz-p-sm-12" Style="height:100vh; overflow-y:auto;">
    <RadzenBreadCrumb>
        <Template Context="item">
            <RadzenBadge Text="@item.Text" IsPill="true" />
        </Template>
        <ChildContent>
            <RadzenBreadCrumbItem Path="/GeneratePayment" Text="Crear Planilla" />
        </ChildContent>
    </RadzenBreadCrumb>
    <br />
    <RadzenDropDown @bind-Value="@SelectedPaymentFrequencyType" Data="@PaymentFrequencyTypes"
                    Style="width: 100%;" TextProperty="PaymentFrequency" ValueProperty="PaymentFrequency" />
    <RadzenButton Variant="Variant.Flat" Click=@(args => GetGeneratedPayments()) Text="Generar" ButtonStyle="ButtonStyle.Primary" />

    <br />
    @if (Payments != null)
    {
        <RadzenTemplateForm Data="@Payment" Submit="@((PaymentEntity args) => { CreateNewPayments(args); })">
            <RadzenRow Gap="1rem">
                <div class="rz-p-sm-12">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-md-12">
                                <RadzenDataGrid ColumnWidth="200px" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" Data="@Payments" @bind-Value="@SelectedPayment">
                                    <Columns>
                                        <RadzenDataGridColumn TItem="PaymentEntity" Property="PaymentDate" Title="Fecha" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
                                        <RadzenDataGridColumn TItem="PaymentEntity" Property="NameEmploye" Title="Empleado" Frozen="true" Width="160px" TextAlign="TextAlign.Center" />
                                        <RadzenDataGridColumn TItem="PaymentEntity" Property="Amount" Title="Monto" Width="80px" />
                                        <RadzenDataGridColumn TItem="PaymentEntity" Property="PaymentDescription" Title="Descripción" Width="160px" />
                                    </Columns>
                                </RadzenDataGrid>
                            </div>
                            <hr />
                            <div class="col-md-12">
                                <RadzenCard Variant="Variant.Outlined">
                                    Empleado Seleccionado:
                                    <b>@SelectedPayment.FirstOrDefault()?.NameEmploye</b>
                                    <hr />
                                    Detalles:

                                    <RadzenRow AlignItems="AlignItems.End" Wrap="FlexWrap. " Gap="1rem" Class="rz-p-sm-12">
                                        <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                                            <RadzenDropDown @bind-Value="@paymentDetailAdd.DetailsType" Data="@DetailsTypes"
                                                            Style="width: 100%;" TextProperty="DetailsType" ValueProperty="DetailsType"
                                                            Name="Gender">
                                            </RadzenDropDown>
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                                            <RadzenFormField Text="Descripción" Variant="Variant.Outlined" Style="width: 100%;">
                                                <RadzenTextBox @bind-Value="@paymentDetailAdd.Description" Style="width: 100%;" />
                                            </RadzenFormField>
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                                            <RadzenFormField Text="Monto" Variant="Variant.Outlined" Style="width: 100%;">
                                                <RadzenNumeric Placeholder="0.0" @bind-Value="@paymentDetailAdd.Amount" Style="width: 100%;" />
                                            </RadzenFormField>
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                                            <RadzenButton Size="ButtonSize.Large" Icon="add_circle" Text="Agregar" Click="() => AddDetail(paymentDetailAdd, SelectedPayment.FirstOrDefault()?.PaymentRegistrationDetails, SelectedPayment.FirstOrDefault())" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <hr />
                                    <RadzenDataList AllowVirtualization=true Style="@(allowVirtualization ? "overflow:auto;" : "")"
                                                    WrapItems="@(false)" AllowPaging="@(false)"
                                                    Data="@SelectedPayment.FirstOrDefault()?.PaymentRegistrationDetails" TItem="PaymentDetailEntity" PageSize="5" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
                                        <Template Context="paymentDetail">
                                            <RadzenCard Style="width: 100%; padding: 0;">
                                                <RadzenRow Gap="0">
                                                    <RadzenColumn Size="12" SizeLG="3" Class="rz-p-4 product-title">
                                                        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-color-secondary">@(paymentDetail.DetailsType)</RadzenText>
                                                    </RadzenColumn>
                                                    <RadzenColumn Size="12" SizeLG="7" Class="rz-p-4">
                                                        <RadzenRow Gap="0">
                                                            <RadzenColumn Size="12" SizeMD="6" SizeLG="2">
                                                                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-0">Descripción</RadzenText>
                                                                <RadzenText TextStyle="TextStyle.Body2">@(paymentDetail.Description)</RadzenText>
                                                            </RadzenColumn>
                                                            <RadzenColumn Size="12" SizeMD="6" SizeLG="2">
                                                                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-0">Monto</RadzenText>
                                                                <RadzenText TextStyle="TextStyle.Body2">@(paymentDetail.Amount.ToString())</RadzenText>
                                                            </RadzenColumn>
                                                        </RadzenRow>
                                                    </RadzenColumn>
                                                    <RadzenColumn Size="12" SizeLG="2" Class="rz-p-4">
                                                        <RadzenButton Shade="Shade.Light" Click=@(()=> EditDetail(paymentDetail, SelectedPayment.FirstOrDefault()?.PaymentRegistrationDetails, SelectedPayment.FirstOrDefault()) ) Text="Eliminar" ButtonStyle="ButtonStyle.Danger" />
                                                    </RadzenColumn>
                                                </RadzenRow>
                                            </RadzenCard>
                                        </Template>
                                    </RadzenDataList>
                                </RadzenCard>
                            </div>
                        </div>
                    </div>
                </div>
            </RadzenRow>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem"
                         Class="rz-mt-8 rz-mb-4">
                <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Guardar" />
            </RadzenStack>
        </RadzenTemplateForm>
    }
</RadzenBody>

 <style>
     .product-title {
         min-height: 72px;
         background-color: var(--rz-secondary-lighter);
     }

     .price-badge {
         font-size: 16px;
         font-weight: bold;
         line-height: 20px;
         padding: 8px;
     }
 </style>

@code {
    private ICollection<EmployeeEntity> Employee;
    private IList<PaymentEntity> SelectedPayment;
    private ICollection<PaymentEntity> Payments;
    private PaymentEntity Payment = new PaymentEntity();
    private List<PaymentDetailEntity> paymentDetail = new List<PaymentDetailEntity>();
    private PaymentDetailEntity paymentDetailAdd = new PaymentDetailEntity();
    string SelectedPaymentFrequencyType;
    bool allowVirtualization;
    string? jwt;
    string? uuidUserLoged;

    List<dynamic> DetailsTypes = new List<dynamic>()
    {
        new { DetailsType = "Descuento" },
        new { DetailsType = "Bono" },
        new { DetailsType = "Salario" },
    };

    List<dynamic> PaymentFrequencyTypes = new List<dynamic>()
    {
        new { PaymentFrequency = "Quincenal" },
        new { PaymentFrequency = "Mensual" }
    };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task GetGeneratedPayments()
    {
        string? jwt = await LocalStorage.GetItemAsync<string>("jwt");
        if (!string.IsNullOrEmpty(jwt))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            HttpResponseMessage response = await Http.PostAsJsonAsync("api/Payments/GeneratePayments", new PayloadGeneric()
            {
                Uuid = "",
                payload = { PaymentFrequency = SelectedPaymentFrequencyType }
            });

            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                Payments = JsonConvert.DeserializeObject<ICollection<PaymentEntity>>(content);
                if (Payments == null)
                {
                    showError("Error al intentar cargar los datos!");
                }
                else
                {
                    SelectedPayment = Payments.Take(1).ToList();
                }

            }
            else
            {
                showError("Error al intentar cargar los datos!");
            }
        }
        else
        {
            await LocalStorage.ClearAsync();
            NavigationManager.NavigateTo("login", true);
        }
    }

    public void AddDetail(PaymentDetailEntity detail, List<PaymentDetailEntity> det, PaymentEntity payment)
    {
        if (detail.DetailsType == "Descuento")
            payment.Amount -= detail.Amount;
        else
            payment.Amount += detail.Amount;

        det.Add(detail);
        paymentDetailAdd = new PaymentDetailEntity();
    }

    public void EditDetail(PaymentDetailEntity detail, List<PaymentDetailEntity> det, PaymentEntity payment)
    {
        if (detail.DetailsType == "Descuento")
            payment.Amount += detail.Amount;
        else
            payment.Amount -= detail.Amount;

        det.Remove(detail);
    }

    private async Task CreateNewPayments(PaymentEntity paymentEntity)
    {
        string? jwt = await LocalStorage.GetItemAsync<string>("jwt");
        if (!string.IsNullOrEmpty(jwt))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            HttpResponseMessage response = await Http.PostAsJsonAsync("api/Payments/SaveGeneratedPayments", new PayloadGeneric()
            {
                Uuid = "",
                payload = Payments,
            });
            if (response.IsSuccessStatusCode)
            {
                showInfo("Nómina generada con Éxito!");
            }
            else
            {
                showError("Error al intentar cargar los datos!");
            }
        }
        else
        {
            await LocalStorage.ClearAsync();
            NavigationManager.NavigateTo("login", true);
        }
    }

    private void showError(string messageInfo = null)
    {
        if (string.IsNullOrEmpty(messageInfo))
            messageInfo = $"Error al intentar obtener datos del servidor!";

        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = messageInfo,
                Duration = 4000
            });
    }

    private void showInfo(string msg)
    {
        string messageInfo = msg;
        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Info,
                Summary = messageInfo,
                Duration = 4000
            });
    }
}
