@page "/PaymentsGrid"
@using System.Net.Http.Headers
@using FE_HumanResources.Models
@using FE_HumanResources.Entities
@inject ILocalStorageService LocalStorage
@inject ContextMenuService ContextMenuService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject HttpClient Http

    <RadzenBreadCrumb>
        <Template Context="item">
            <RadzenBadge Text="@item.Text" IsPill="true" />
        </Template>
        <ChildContent>
            <RadzenBreadCrumbItem Path="/" Text="Pagos / Planilla" />
            <RadzenBreadCrumbItem Path="/usersgrid" Text="Lista de Pagos" />
        </ChildContent>
    </RadzenBreadCrumb>
    <br />
    <RadzenButton Text="Actualizar" Click="@Reset" Style="margin-bottom: 20px;" />
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                    AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@Payments" TItem="PaymentEntity" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or"
                    SelectionMode="DataGridSelectionMode.Single" @bind-Value=@SelectedPayment CellContextMenu="@OnCellContextMenu"
                    FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
        <Columns>
            <RadzenDataGridColumn TItem="PaymentEntity" Property="PaymentDate" Title="Fecha" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="PaymentEntity" Property="NameEmploye" Title="Empleado" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="PaymentEntity" Property="Amount" Title="Monto" Width="160px" />
            <RadzenDataGridColumn TItem="PaymentEntity" Property="PaymentDescription" Title="Descripción" Width="160px" />
        </Columns>
    </RadzenDataGrid>



@code {
    private ICollection<EmployeeEntity> Employee;
    private IList<PaymentEntity> SelectedPayment;
    private ICollection<PaymentEntity> Payments;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Reset();
    }

    private async Task Reset()
    {
        string? jwt = await LocalStorage.GetItemAsync<string>("jwt");
        if (!string.IsNullOrEmpty(jwt))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            HttpResponseMessage response = await Http.GetAsync("api/Payments/GetAll");
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                Payments = JsonConvert.DeserializeObject<ICollection<PaymentEntity>>(content);
                if (Payments == null)
                {

                }
                else
                {
                    SelectedPayment = Payments.Take(1).ToList();
                }
                
            }
            else
            {
                showError("Error al intentar cargar los datos!");
            }
        }
        else
        {
            await LocalStorage.ClearAsync();
            NavigationManager.NavigateTo("login", true);
        }
    }

    void OnCellContextMenu(DataGridCellMouseEventArgs<PaymentEntity> args)
    {
        SelectedPayment = new List<PaymentEntity>() { args.Data };

        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Editar", Value = 2, Icon = "search" },
                new ContextMenuItem(){ Text = "Ver ", Value = 1, Icon = "home" },
                new ContextMenuItem(){ Text = "Eliminar", Value = 3, Icon = "info" },
                },
            (e) =>
            {
                if (e.Value.ToString() == "2")
                {
                    NavigationManager.NavigateTo($"Payment/{args.Data.Uuid}");
                }
                else if (e.Value.ToString() == "1")
                {
                    
                }
            }
         );
    }

    private void showError(string messageInfo = null)
    {
        if (string.IsNullOrEmpty(messageInfo))
            messageInfo = $"Error al intentar obtener datos del servidor!";

        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = messageInfo,
                Duration = 4000
            });
    }

    private void showInfo(string msg)
    {
        string messageInfo = msg;
        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Info,
                Summary = messageInfo,
                Duration = 4000
            });
    }
}
