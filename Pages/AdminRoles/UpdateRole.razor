@page "/UpdateRole/{uuid}"
@using System.Net.Http.Headers
@using FE_HumanResources.Models
@using FE_HumanResources.Entities
@inject ILocalStorageService LocalStorage
@inject ContextMenuService ContextMenuService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http

<RadzenBody Gap="1rem" Class="rz-p-sm-12" Style="height:100vh; overflow-y:auto;">
    <RadzenBreadCrumb>
        <Template Context="item">
            <RadzenBadge Text="@item.Text" IsPill="true" />
        </Template>
        <ChildContent>
            <RadzenBreadCrumbItem Path="/AdminRoles" Text="Roles" />
            <RadzenBreadCrumbItem Path="/UpdateRole" Text="Editar Rol" />
        </ChildContent>
    </RadzenBreadCrumb>
    <RadzenTemplateForm Data="@RoleEntity" Submit="@((RoleEntity args) => { Update(); })">
        <ChildContent Context="formContext">
            <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
                <RadzenColumn Size="12" SizeMD="12">
                    <RadzenStack>
                        <RadzenFieldset Text="Informacón del Rol">
                            <RadzenStack Gap="1rem">
                                <RadzenRow AlignItems="AlignItems.Center">
                                    <RadzenColumn Size="12" SizeMD="4">
                                        <RadzenLabel Text="Nombre" Component="Name" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenTextBox Style="width: 100%;" Name="Name" @bind-Value="RoleEntity.Name" />
                                    </RadzenColumn>
                                </RadzenRow>
                                <RadzenRow AlignItems="AlignItems.Center">
                                    <RadzenColumn Size="12" SizeMD="4">
                                        <RadzenLabel Text="Descripción" Component="Description" />
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenTextBox Style="width: 100%;" Name="Description" @bind-Value="RoleEntity.Description" />
                                    </RadzenColumn>
                                </RadzenRow>
                            </RadzenStack>
                        </RadzenFieldset>
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="12">
                    <br />
                    <RadzenTextBox Style="width: 100%;" Name="Search" Placeholder="Buscar..." @bind-Value="searchTerm" Change=@(args => FilterTree()) />
                    <br />
                    <br />
                    <RadzenCard>
                        <RadzenTree AllowCheckBoxes="true" Data=@MenuEntities @bind-CheckedValues=@CheckedValues Change=@OnTreeChange>
                            <RadzenTreeLevel TextProperty="@nameof(MenuEntity.Name)" ChildrenProperty="SubMenus" HasChildren=@(a => ((MenuEntity)a).SubMenus != null && ((MenuEntity)a).SubMenus.Count > 0) />
                            <RadzenTreeLevel TextProperty="@nameof(SubMenuEntity.Name)" ChildrenProperty="MenuActions" HasChildren=@(a => ((SubMenuEntity)a).MenuActions != null && ((SubMenuEntity)a).MenuActions.Count > 0) />
                            <RadzenTreeLevel TextProperty="@nameof(MenuActionsEntity.Name)" HasChildren=@(a => false) />
                        </RadzenTree>
                    </RadzenCard>
                </RadzenColumn>
            </RadzenRow>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem"
                         Class="rz-mt-8 rz-mb-4">
                <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Guardar" />
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="arrow_back" Text="Regresar" Click="@ReturnMenu" />
            </RadzenStack>
        </ChildContent>
    </RadzenTemplateForm>
</RadzenBody>


@code {
    [Parameter]
    public string uuid { get; set; }
    private IEnumerable<MenuEntity> MenuEntities;
    private IEnumerable<MenuEntity> originalMenuEntities;
    private IEnumerable<SubMenuEntity> SubMenuEntities;
    private IEnumerable<MenuActionsEntity> MenuActionsEntities;
    private RoleEntity RoleEntity = new RoleEntity();
    private List<PermissionsMenuEntity> PermisionsMenuEntities;
    private NewRolePermissions newRolePermissions;
    private string? jwt;
    IEnumerable<object> checkedValues;
    IEnumerable<object> CheckedValues
    {
        get => checkedValues;
        set
        {
            checkedValues = value;
            if (checkedValues != null)
            {
                UpdateAllowedValues(MenuEntities, checkedValues);
            }
        }
    }

    private string searchTerm;
    private void FilterTree()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            // Si el término de búsqueda está vacío, restablece los datos del árbol
            MenuEntities = originalMenuEntities;
        }
        else
        {
            // Filtra los datos del árbol en función del término de búsqueda
            MenuEntities = originalMenuEntities.Where(menu =>
                menu.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                menu.SubMenus.Any(subMenu =>
                    subMenu.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    subMenu.MenuActions.Any(action =>
                        action.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                    )
                )
            ).ToList();
        }
    }

    private void OnTreeChange(object value)
    {
        UpdateAllowedValues(MenuEntities, CheckedValues);
    }

    private void UpdateAllowedValues(IEnumerable<MenuEntity> menuEntities, IEnumerable<object> checkedValues)
    {
        var checkedUuids = checkedValues.Select(c =>
        {
            if (c is MenuEntity menu) return menu.Uuid;
            if (c is SubMenuEntity subMenu) return subMenu.Uuid;
            if (c is MenuActionsEntity action) return action.Uuid;
            return null;
        }).Where(uuid => uuid != null).ToList();

        foreach (var menu in menuEntities)
        {
            menu.Allowed = checkedUuids.Contains(menu.Uuid);

            foreach (var subMenu in menu.SubMenus)
            {
                subMenu.Allowed = checkedUuids.Contains(subMenu.Uuid);

                foreach (var action in subMenu.MenuActions)
                {
                    action.Allowed = checkedUuids.Contains(action.Uuid);
                }

                // Si al menos una acción está permitida, el submenú debe estar permitido
                if (subMenu.MenuActions.Any(a => a.Allowed))
                {
                    subMenu.Allowed = true;
                }
            }

            // Si al menos un submenú está permitido, el menú debe estar permitido
            if (menu.SubMenus.Any(sm => sm.Allowed))
            {
                menu.Allowed = true;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        jwt = await LocalStorage.GetItemAsync<string>("jwt");
        if (!string.IsNullOrEmpty(jwt))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            HttpResponseMessage response = await Http.PostAsJsonAsync("api/Permissions/Get", new PayloadGeneric()
                {
                    Uuid = this.uuid,
                    payload = new { }
                });

            if (response.IsSuccessStatusCode)
            {
                string content = await response.Content.ReadAsStringAsync();
                newRolePermissions = JsonConvert.DeserializeObject<NewRolePermissions>(content);

                // Imprimir datos obtenidos para depuración
                Console.WriteLine(JsonConvert.SerializeObject(newRolePermissions, Formatting.Indented));

                if (newRolePermissions == null)
                    showError("Perdón Algo salio mal");
                else
                {
                    RoleEntity.Uuid = newRolePermissions.UuidRole;
                    RoleEntity.Name = newRolePermissions.RoleName;
                    RoleEntity.Description = newRolePermissions.RoleDescription;

                    originalMenuEntities = newRolePermissions.Permissions.Select(s => new MenuEntity()
                        {
                            Uuid = s.Uuid,
                            Allowed = s.Allowed,
                            Name = s.Name,
                            Description = s.Description,
                            Icon = s.Icon,
                            Order = s.Order,
                            SubMenus = s.PermissionsSubMenus.Select(sm => new SubMenuEntity()
                            {
                                Uuid = sm.Uuid,
                                Allowed = sm.Allowed,
                                Name = sm.Name,
                                Description = sm.Description,
                                Icon = sm.Icon,
                                Order = sm.Order,
                                MenuActions = sm.PermissionsMenuActions.Select(ma => new MenuActionsEntity()
                                {
                                    Uuid = ma.Uuid,
                                    Allowed = ma.Allowed,
                                    Name = ma.Name,
                                    Description = ma.Description,
                                    Icon = ma.Icon,
                                    Order = ma.Order
                                }).ToList()
                            }).ToList()
                        }).ToList();

                    MenuEntities = originalMenuEntities;

                    // Inicializa los valores permitidos en los valores marcados
                    var checkedItems = new List<object>();
                    foreach (var menu in MenuEntities)
                    {
                        if (menu.Allowed) checkedItems.Add(menu);
                        foreach (var subMenu in menu.SubMenus)
                        {
                            if (subMenu.Allowed) checkedItems.Add(subMenu);
                            foreach (var action in subMenu.MenuActions)
                            {
                                if (action.Allowed) checkedItems.Add(action);
                            }
                        }
                    }
                    CheckedValues = checkedItems;
                }
            }
        }
    }


    private async Task Update()
    {
        newRolePermissions = new NewRolePermissions()
        {
            UuidRole = RoleEntity.Uuid,
            RoleName = RoleEntity.Name,
            RoleDescription = RoleEntity.Description,

            Permissions = MenuEntities.Select(s => new PermissionsMenuEntity()
            {
                Uuid = s.Uuid,
                UuidMenu = s.UuidMenu,
                Allowed = s.Allowed,
                PermissionsSubMenus = s.SubMenus.Select(sm => new PermissionsSubMenuEntity()
                {
                    Uuid = sm.Uuid,
                    UuidSubMenu = sm.UuidSubMenu,
                    UuidMenu = s.Uuid,
                    Allowed = sm.Allowed,
                    PermissionsMenuActions = sm.MenuActions.Select(ma => new PermissionsMenuActionsEntity()
                    {
                        Uuid = ma.Uuid,
                        UuidMenuActions = ma.UuidMenuActions,
                        UuidSubMenu = sm.Uuid,
                        Allowed = ma.Allowed,

                    }).ToList(),

                }).ToList(),

            }).ToList(),

        };

        if (!string.IsNullOrEmpty(jwt))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            HttpResponseMessage response = await Http.PostAsJsonAsync("api/Permissions/Update", new PayloadGeneric()
                {
                    Uuid = "",
                    payload = newRolePermissions
                });

            if (response.StatusCode == System.Net.HttpStatusCode.Created)
            {
                showInfo("Actualizado con éxito!");
                MenuEntities = null;
                RoleEntity = new RoleEntity();
                NavigationManager.NavigateTo("/AdminRoles");
            }
            else
                showError();
        }
    }

    private async Task ReturnMenu()
    {
        NavigationManager.NavigateTo("/AdminRoles");
    }

    private void showError(string messageInfo = null)
    {
        if (string.IsNullOrEmpty(messageInfo))
            messageInfo = $"Perdon algo salio mal!";

        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = messageInfo,
                Duration = 4000
            });
    }

    private void showInfo(string msg)
    {
        string messageInfo = msg;
        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Info,
                Summary = messageInfo,
                Duration = 4000
            });
    }
}
