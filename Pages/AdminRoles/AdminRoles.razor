@page "/AdminRoles"
@using System.Net.Http.Headers
@using FE_HumanResources.Models
@using FE_HumanResources.Entities
@inject ILocalStorageService LocalStorage
@inject ContextMenuService ContextMenuService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http

<RadzenBody Gap="1rem" Class="rz-p-sm-12">
    <RadzenBreadCrumb>
        <Template Context="item">
            <RadzenBadge Text="@item.Text" IsPill="true" />
        </Template>
        <ChildContent>
            <RadzenBreadCrumbItem Path="/" Text="Empleados" />
            <RadzenBreadCrumbItem Path="/usersgrid" Text="Lista de Empleados" />
        </ChildContent>
    </RadzenBreadCrumb>
    <br />
    <RadzenButton Text="Crear" Click="@Create" Style="margin-bottom: 20px;" />
    <RadzenButton Text="Actualizar" Click="@Reset" Style="margin-bottom: 20px;" />
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                    AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@Roles" TItem="RoleEntity" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or"
                    SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedRole CellContextMenu="@OnCellContextMenu"
                    FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
        <Columns>
            <RadzenDataGridColumn TItem="RoleEntity" Property="Name" Title="Nombre" Frozen="true" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="RoleEntity" Property="Description" Title="Descripcion" Frozen="true" />

        </Columns>
    </RadzenDataGrid>
</RadzenBody>


@code {
    IEnumerable<RoleEntity> Roles;
    IList<RoleEntity> selectedRole;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Reset();
    }

    private async Task Reset()
    {
        string? jwt = await LocalStorage.GetItemAsync<string>("jwt");
        if (!string.IsNullOrEmpty(jwt))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            HttpResponseMessage response = await Http.GetAsync("api/Catalogs/Roles");

            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                Roles = JsonConvert.DeserializeObject<ICollection<RoleEntity>>(content);
                if (Roles == null)
                    showError();
            }
        }
        StateHasChanged();
    }

    private async Task Create()
    {
        NavigationManager.NavigateTo("CreateRole");
    }

    private void showError(string messageInfo = null)
    {
        if (string.IsNullOrEmpty(messageInfo))
            messageInfo = $"Perdon algo salio mal!";

        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = messageInfo,
                Duration = 4000
            });
    }

    private void showInfo(string msg)
    {
        string messageInfo = msg;
        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Info,
                Summary = messageInfo,
                Duration = 4000
            });
    }

    async Task OnCellContextMenu(DataGridCellMouseEventArgs<RoleEntity> args)
    {
        selectedRole = new List<RoleEntity>() { args.Data };

        var contextMenuItems = new List<ContextMenuItem>
        {
            new ContextMenuItem() { Text = "Editar", Value = 4, Icon = "visibility" }
        };

        ContextMenuService.Open(args,
            contextMenuItems,
            (e) =>
            {
                if (e.Value.ToString() == "1")
                {
                    
                }
                else if (e.Value.ToString() == "2")
                {
                    
                }
                else if (e.Value.ToString() == "4")
                {
                    NavigationManager.NavigateTo($"UpdateRole/{args.Data.Uuid}");
                }
            }
         );
    }

}
