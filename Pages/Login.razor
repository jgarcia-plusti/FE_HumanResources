@page "/login"
@using Entities
@using Models
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject NotificationService NotificationService
@inject DialogService DialogService
@using System.Net.Http.Headers

<PageTitle>RH</PageTitle>
<link href="css/login-style/style.bundle.css" rel="stylesheet" type="text/css" />
<link href="css/login-style/app.css" rel="stylesheet" type="text/css" />

<div class="d-flex flex-column flex-root" id="kt_app_root">
    @* Inicia el fondo *@
    <style>
        body {
            background-image: url('source/branding-institucional/background-login.jpg');
        }
    </style>
    @* END *@
    @* Incia la columna izquierda *@
    <div class="d-flex flex-column flex-column-fluid flex-lg-row">
        <div class="d-flex flex-center w-lg-50 pt-15 pt-lg-0 px-10">
            <div class="d-flex flex-center flex-lg-start flex-column">
                <h2 class="text-white fw-700 m-0" style="font-size: 40px;">¡Bienvenido de nuevo!</h2>
                <h2 class="text-white fw-700 m-0" style="font-size: 25px;">
                    Inicia sesión para continuar
                </h2>
            </div>

        </div>
        @* END *@
        @* Incia columna derecha *@
        <div
            class="d-flex flex-column-fluid flex-lg-row-auto justify-content-center justify-content-lg-end p-12 p-lg-20">
            <div class="bg-body d-flex flex-column align-items-stretch flex-center rounded-4 w-md-600px p-20">
                <div class="d-flex flex-center flex-column flex-column-fluid px-lg-10 pb-15 pb-lg-20">
                    @* Inicia el formulario *@
                    <EditForm Model="loginModel" OnValidSubmit="login" class="form w-100" id="kt_sign_in_form">
                        <DataAnnotationsValidator />
                        @* Encabezado del formulario / Logos *@
                        <div class="text-center mb-11">
                            <a href="#" class="mb-0 mb-lg-12">
                                <img alt="Logo" src="source/branding-institucional/logo.png" width="110px" />
                            </a>
                            <br>
                            <a href="#" class="mb-0 mb-lg-12">
                                <img alt="Logo" src="source/branding-institucional/Slogan-francelli.png"
                                    class="h-50px h-lg-75px" />
                            </a>

                        </div>
                        @* END *@
                        <div class="row g-3 mb-9">
                            <div class="col-md-6">
                            </div>
                            <div class="col-md-6">
                            </div>
                        </div>
                        @* Separador *@
                        <div class="separator separator-content my-14">
                            <span class="w-300px text-gray-500 fw-semibold fs-7">Inicia sesión con tu cuenta</span>
                        </div>
                        @* END *@
                        @* Inputs login *@
                        <div class="fv-row mb-8">
                            <InputText placeholder="Correo electrónico" autocomplete="off"
                                class="form-control bg-transparent" @bind-Value="loginModel.Email" />
                            <ValidationMessage For="(() => loginModel.Email)"></ValidationMessage>
                        </div>
                        <div class="fv-row mb-3">
                            <InputText type="password" placeholder="Contraseña" autocomplete="off"
                                class="form-control bg-transparent" @bind-Value="loginModel.Password" />
                            <ValidationMessage For="(() => loginModel.Password)"></ValidationMessage>
                        </div>
                        @* END *@
                        <div class="d-flex flex-stack flex-wrap gap-3 fs-base fw-semibold mb-8">
                        <div>

                        </div>
                                                    
                        </div>

                        @* Iniciar sesión btn *@
                        <div class="d-grid mb-10">
                            <button type="submit" id="kt_sign_in_submit" class="btn btn-primary"
                                style="background-color: #22355d;">

                                <span class="indicator-label">Iniciar sesión</span>
                                <!--end::Indicator label-->
                                <!--begin::Indicator progress-->
                                <span class="indicator-progress">
                                    Por favor espere ...
                                    <span class="spinner-border spinner-border-sm align-middle ms-2"></span>
                                </span>
                                <!--end::Indicator progress-->
                            </button>
                        </div>
                        <div class="rz-p-12 rz-text-align-center">
                            <RadzenButton Text="¿Olvidaste tu contraseña?" ButtonStyle="ButtonStyle.Secondary" Click=@ShowInlineDialog />
                        </div>
                        @* END *@

                    </EditForm>
                    @* Fin del formulario *@
                </div>
                @* Inicia Footer *@
                <div class="w-lg-500px d-flex flex-center px-10 mx-auto">
                    <!--begin::Links-->
                    <div class="d-flex fw-semibold text-primary fs-base gap-5">
                        <a href="https://oscarleon.app/" target="_blank"
                            style="color: rgb(168, 166, 164); text-align: center;">
                            Todos
                            los Derechos Reservados
                            Industrias Francelli 2024
                            <br>
                            <span style="font-size: 10px;">Desarrollado por OSCARLEON</span>
                        </a>
                    </div>
                </div>
                @* END *@
            </div>
        </div>
        @* Finaliza la columna derecha *@

    </div>
</div>


@code {
    private LoginModel loginModel = new LoginModel();
    private string messageInfo;
    class Model
    {
        public string Email { get; set; }
        public string Password { get; set; }
        public string RepeatPassword { get; set; }
    }
    Model model = new Model();

    private async void login()
    {
        try
        {
            if (string.IsNullOrEmpty(loginModel.Email) || string.IsNullOrEmpty(loginModel.Password))
            {
                messageInfo = $"No se admite un campo vacio!";

                NotificationService.Notify(new NotificationMessage()
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = messageInfo,
                        Duration = 4000
                    });
            }
            else
            {
                HttpResponseMessage response = await Http.PostAsJsonAsync("api/login/In", loginModel);
                if (response.IsSuccessStatusCode)
                {
                    string content = response.Content.ReadAsStringAsync().Result;
                    JWTModel JWT = JsonConvert.DeserializeObject<JWTModel>(content);

                    if (JWT.RestoreUser)
                    {
                        ShowDialogResetPassword();
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(JWT.Jwt))
                        {
                            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", JWT.Jwt);
                            HttpResponseMessage userRest = await Http.PostAsJsonAsync("api/user/GetProfile", new PayloadGeneric()
                                {
                                    Uuid = JWT.uuidUser
                                });

                            if (userRest.IsSuccessStatusCode)
                            {
                                string contentUser = userRest.Content.ReadAsStringAsync().Result;
                                UserEntity? user = JsonConvert.DeserializeObject<UserEntity>(contentUser);
                                if (user != null)
                                {
                                    if (user.Active)
                                    {
                                        string? logenUser = await LocalStorage.GetItemAsync<string>("logedUser");
                                        if (string.IsNullOrEmpty(logenUser))
                                        {
                                            await LocalStorage.SetItemAsStringAsync("logedUser", contentUser);
                                            await LocalStorage.SetItemAsStringAsync("uuidUser", user.Uuid);
                                            await LocalStorage.SetItemAsStringAsync("jwt", JWT.Jwt);

                                            await AuthStateProvider.GetAuthenticationStateAsync();
                                            NavigationManager.NavigateTo("dashboard", true);
                                        }
                                        else
                                        {
                                            NavigationManager.NavigateTo("dashboard", true);
                                        }
                                    }
                                    else
                                    {
                                        messageInfo = $"Usuario inactivo!";
                                        NotificationService.Notify(new NotificationMessage()
                                        {
                                            Severity = NotificationSeverity.Warning,
                                            Summary = messageInfo,
                                            Duration = 4000
                                        });
                                    }
                                }
                            }
                        }
                    }
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    messageInfo = $"Usted no esta autorizado, Contraseña o Correo erroneo";
                    NotificationService.Notify(new NotificationMessage()
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = messageInfo,
                            Duration = 4000
                        });
                }
                else
                {
                    messageInfo = $"Error al intentar ingresar.";
                    NotificationService.Notify(new NotificationMessage()
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = messageInfo,
                            Duration = 4000
                        });
                }
            }
        }
        catch
        {
            messageInfo = $"Error al intentar ingresar.";
            await LocalStorage.ClearAsync();
            NotificationService.Notify(new NotificationMessage()
                {
                    Severity = NotificationSeverity.Error,
                    Summary = messageInfo,
                    Duration = 4000
                });
        }
    }

    async Task ShowInlineDialog()
    {
        var result = await DialogService.OpenAsync("Restaurar Contraseña", ds =>
            @<RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">                    
                    <RadzenTemplateForm TItem="Model" Data=@model Submit=@OnSubmit>
                        <RadzenFieldset Text="ingresa tu correo">
                            <div class="row">
                                <div>
                                    <RadzenLabel Text="Correo" Component="Email" />
                                </div>
                                <div>
                                    <RadzenTextBox style="display: block" Name="Email" @bind-Value=@model.Email />
                                    <RadzenRequiredValidator Component="Email" Text="Ingresa tu correo" Popup=false Style="position: absolute" />
                                    <RadzenEmailValidator Component="Email" Text="Ingresa un correo valido" Popup=false Style="position: absolute" />
                                </div>
                            </div>
                            <br>
                            <hr>
                            <br>
                            <RadzenButton Text="Eviar" ButtonType="ButtonType.Submit" />
                            <RadzenButton Text="Cancelar" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Danger" />
                        </RadzenFieldset>
                    </RadzenTemplateForm>
                </RadzenStack>                
            </RadzenStack>
    );
    }

    private async void OnSubmit(Model model)
    {
        HttpResponseMessage userRest = await Http.PostAsJsonAsync("api/User/ResetPasword", new PayloadGeneric()
        {
            Uuid = "",
            payload = new { Email = model.Email }
        });

        if (userRest.IsSuccessStatusCode)
        {
            var result = await DialogService.OpenAsync("Correo enviado", ds =>
            @<RadzenStack Gap="1.5rem">
                <p>Se envio un correo a @model.Email</p>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="width: 80px;" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>);
        }
    }

    async Task ShowDialogResetPassword()
    {
        var result = await DialogService.OpenAsync("Cambiar Contraseña", ds =>
        @<RadzenStack>
            <RadzenTemplateForm TItem="Model" Data=@model Submit=@resertPassword>
                <RadzenFieldset Text="Contraseña">
                    <RadzenStack Gap="2rem" Class="rz-p-4 rz-p-md-12">
                        <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                            <RadzenColumn Size="12" SizeMD="4" Class="rz-text-align-start rz-text-align-md-end">
                                <RadzenLabel Text="Contraseña" Component="Password" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenPassword Name="Password" @bind-Value=@model.Password Style="display: block; width: 100%" />
                                <RadzenRequiredValidator Component="Password" Text="Enter password" Popup=false Style="position: absolute" />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                            <RadzenColumn Size="12" SizeMD="4" Class="rz-text-align-start rz-text-align-md-end">
                                <RadzenLabel Text="Repita la contraseña" Component="RepeatPassword" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenPassword Name="RepeatPassword" @bind-Value=@model.RepeatPassword Style="display: block; width: 100%" />
                                <RadzenRequiredValidator Component="RepeatPassword" Text="Repeat your password" Popup=false Style="position: absolute" />
                                <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(model.RepeatPassword)) Value=@model.Password Component="RepeatPassword" Text="Passwords should be the same" Popup=false Style="position: absolute" />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center" Class="rz-mt-4">
                            <RadzenColumn Size="12" Offset="0" SizeMD="8" OffsetMD="4">
                                <RadzenButton ButtonType="ButtonType.Submit" Text="Enviar"></RadzenButton>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenTemplateForm>
        </RadzenStack>
    );
    }

    private async void resertPassword(Model model)
    {
        HttpResponseMessage userRest = await Http.PostAsJsonAsync("api/User/ChangePassword", new PayloadGeneric()
        {
            Uuid = "",
            payload = new { Email = loginModel.Email, newPassword = model.RepeatPassword }
        });

        if (userRest.IsSuccessStatusCode)
        {
            var result = await DialogService.OpenAsync("Contraseña cambiada", ds =>
            @<RadzenStack Gap="1.5rem">
                <p>Se actualizo la contraseña a @model.Email</p>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="width: 80px;" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>);
        }
    }
    
    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
}