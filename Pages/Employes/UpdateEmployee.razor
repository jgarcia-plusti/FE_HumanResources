@page "/employee/{uuid}"
@using System.Net.Http.Headers
@using FE_HumanResources.Models
@using FE_HumanResources.Entities
@inject ILocalStorageService LocalStorage
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject HttpClient Http
<RadzenBody Gap="1rem" Class="rz-p-sm-12">
    <RadzenBreadCrumb>
        <Template Context="item">
            <RadzenBadge Text="@item.Text" IsPill="true" />
        </Template>
        <ChildContent>
            <RadzenBreadCrumbItem Path="/" Text="Empelados" />
            <RadzenBreadCrumbItem Path="/usersgrid" Text="Editar Empleado" />
        </ChildContent>
    </RadzenBreadCrumb>
    <RadzenTemplateForm Data="@Employee" Submit="@((EmployeeEntity args) => { Update(args); })">
    <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack>
                <RadzenFieldset Text="Informacion de Empleado">
                    <RadzenStack Gap="1rem">

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Nombres" Component="Name" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenTextBox Style="width: 100%;" Name="Name" @bind-Value="Employee.Name" />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Apellidos" Component="LastName" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenTextBox Style="width: 100%;" Name="LastName" @bind-Value="Employee.LastName" />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="DPI" Component="Identification" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenTextBox Style="width: 100%;" Name="Identification" @bind-Value="Employee.Identification" />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Dirección" Component="Adress" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenTextBox Style="width: 100%;" Name="Adress" @bind-Value="Employee.Adress" />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Genero" Component="Gender" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenDropDown @bind-Value="Employee.Gender" Placeholder="Femenino" Data="@genders" Style="width: 100%;"
                                                TextProperty="GenderName" ValueProperty="GenderName" Name="Gender">
                                </RadzenDropDown>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Telefono" Component="Phone" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenNumeric Style="width: 100%;" Name="Phone" @bind-Value="Employee.Phone" />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Fecha de Nacimiento" Component="DateOfBirth" Style="margin-right: 8px; vertical-align: middle;" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">

                                <RadzenDatePicker @bind-Value="Employee.DateOfBirth" Name="DateOfBirth" ShowCalendarWeek />
                             </RadzenColumn>
                         </RadzenRow>
                     </RadzenStack>
                 </RadzenFieldset>
             </RadzenStack>
         </RadzenColumn>
         <RadzenColumn Size="12" SizeMD="6">
             <RadzenStack>
                 <RadzenFieldset Text="Informacion para la Empresa">
                     <RadzenStack Gap="1rem">
                         <RadzenRow AlignItems="AlignItems.Center">
                             <RadzenColumn Size="12" SizeMD="4">
                                 <RadzenLabel Text="Correo" Component="Email" />
                             </RadzenColumn>
                             <RadzenColumn Size="12" SizeMD="8">
                                 <RadzenTextBox Style="width: 100%;" Name="Email" @bind-Value="Employee.Email" />
                             </RadzenColumn>
                         </RadzenRow>
                         <RadzenRow AlignItems="AlignItems.Center">
                             <RadzenColumn Size="12" SizeMD="4">
                                 <RadzenLabel Text="Departamento" Component="Department" />
                             </RadzenColumn>
                             <RadzenColumn Size="12" SizeMD="8">
                                     <RadzenDropDown Disabled="true" @bind-Value="Employee.UuidDepartment" Data="@departments" Style="width: 100%;"
                                                 TextProperty="Name" ValueProperty="Uuid" Name="Department">
                                 </RadzenDropDown>
                             </RadzenColumn>
                         </RadzenRow>
                         <RadzenRow AlignItems="AlignItems.Center">
                             <RadzenColumn Size="12" SizeMD="4">
                                 <RadzenLabel Text="Cargo" Component="JobTitles" />
                             </RadzenColumn>
                             <RadzenColumn Size="12" SizeMD="8">
                                 <RadzenDropDown Disabled="true" @bind-Value="Employee.UuidJobTitle" Data="@jobTitles" Style="width: 100%;"
                                                 TextProperty="Name" ValueProperty="Uuid" Name="JobTitles">
                                 </RadzenDropDown>
                             </RadzenColumn>
                         </RadzenRow>
                         <RadzenRow>
                             <RadzenColumn Size="12" SizeMD="4">
                                 <RadzenLabel Text="Es Usuario" Component="IsUser" />
                             </RadzenColumn>
                             <RadzenColumn Size="12" SizeMD="8">
                                 <RadzenSwitch Name="IsUser" @bind-Value="Employee.IsUSer" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Switch value" }})" />
                             </RadzenColumn>
                         </RadzenRow>
                         <RadzenRow AlignItems="AlignItems.Center">
                             <RadzenColumn Size="12" SizeMD="4">
                                 <RadzenLabel Text="Fecha de Ingreso" Component="InitDate" Style="margin-right: 8px; vertical-align: middle;" />
                             </RadzenColumn>
                             <RadzenColumn Size="12" SizeMD="8">

                                 <RadzenDatePicker @bind-Value="Employee.InitDate" Name="InitDate" ShowCalendarWeek />
                             </RadzenColumn>
                         </RadzenRow>
                     </RadzenStack>
                 </RadzenFieldset>
             </RadzenStack>
         </RadzenColumn>
     </RadzenRow>
     <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
         <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Save" />
             <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="arrow_back" Text="Regresar" Click="@ReturnMenu" />
     </RadzenStack>
 </RadzenTemplateForm>
</RadzenBody>
 @code {
    [Parameter]
    public string uuid { get; set; }

    EmployeeEntity Employee = new EmployeeEntity();
    private ICollection<DepartmentEntity> departments;
    private ICollection<JobTitleEntity> jobTitles;
    string? jwt = null;
    string? uuidUserLoged = null;

    List<dynamic> genders = new List<dynamic>()
    {
        new { GenderName = "Masculino" },
        new { GenderName = "Femenino" },
        new { GenderName = "Otro" },
    };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        jwt = await LocalStorage.GetItemAsync<string>("jwt");
        uuidUserLoged = await LocalStorage.GetItemAsync<string>("uuidUser");

        if (!string.IsNullOrEmpty(jwt))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);

            HttpResponseMessage response = await Http.GetAsync("api/Catalogs/JobTitles");
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                jobTitles = JsonConvert.DeserializeObject<ICollection<JobTitleEntity>>(content);
                if (jobTitles == null)
                    showError();
            }

            response = await Http.GetAsync("api/Catalogs/Departments");
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                departments = JsonConvert.DeserializeObject<ICollection<DepartmentEntity>>(content);
                if (departments == null)
                    showError();
            }

            response = await Http.PostAsJsonAsync("api/Employee/Get", new PayloadGeneric()
                {
                    Uuid = uuidUserLoged!,
                    payload = new
                    {
                        Uuid = this.uuid
                    }
                });
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                Employee = JsonConvert.DeserializeObject<EmployeeEntity>(content);
                if (Employee == null)
                    showError();
            }

        }
    }

    private void showError()
    {
        string messageInfo = $"Error al intentar obtener datos del servidor!";
        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = messageInfo,
                Duration = 4000
            });
    }

    private async Task Update(EmployeeEntity employee)
    {
        string? jwt = await LocalStorage.GetItemAsync<string>("jwt");
        string? uuidUserLoged = await LocalStorage.GetItemAsync<string>("uuidUser");

        if (employee != null && !string.IsNullOrEmpty(jwt))
        {
            employee.Picture = "...";
            employee.IsDeleted = false;
            employee.DateModify = DateTime.Now.Date;
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            HttpResponseMessage response = await Http.PostAsJsonAsync("api/Employee/Update", new PayloadGeneric()
                {
                    Uuid = uuidUserLoged!,
                    payload = employee
                });
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                EmployeeEntity? updatedEmployee = JsonConvert.DeserializeObject<EmployeeEntity>(content);
                if (updatedEmployee != null)
                {
                    showInfo("Se agrego la información con exito");
                }
            }
            else
            {
                showError("Perdon algo salio mal");
            }
        }
    }

    private void ReturnMenu()
    {
        NavigationManager.NavigateTo($"/employesgrid", true);
    }

    private void showError(string messageInfo = null)
    {
        if (string.IsNullOrEmpty(messageInfo))
            messageInfo = $"Error al intentar obtener datos del servidor!";

        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = messageInfo,
                Duration = 4000
            });
    }

    private void showInfo(string msg)
    {
        string messageInfo = msg;
        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Info,
                Summary = messageInfo,
                Duration = 4000
            });
    }
}
