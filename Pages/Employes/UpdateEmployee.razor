@page "/employee/{uuid}"
@using System.Net.Http.Headers
@using FE_HumanResources.Models
@using FE_HumanResources.Entities
@inject ILocalStorageService LocalStorage
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject HttpClient Http
<RadzenBody Gap="1rem" Class="rz-p-sm-12" Style="height:100vh; overflow-y:auto;">
    <RadzenBreadCrumb>
        <Template Context="item">
            <RadzenBadge Text="@item.Text" IsPill="true" />
        </Template>
        <ChildContent>
            <RadzenBreadCrumbItem Path="/" Text="Empelados" />
            <RadzenBreadCrumbItem Path="/usersgrid" Text="Editar Empleado" />
        </ChildContent>
    </RadzenBreadCrumb>
    <RadzenTemplateForm Data="@Employee" Submit="@((EmployeeEntity args) => { Update(args); })">
    <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack>
                <RadzenFieldset Text="Información de Empleado">
                    <RadzenStack Gap="1rem">

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Nombres" Component="Name" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenTextBox  Style="width: 100%;" Name="Name" @bind-Value="Employee.Name" />
                                    <RadzenLengthValidator Component="Name" Min="5" Text="El nombre debe tener al menos 5 caracteres." Popup=true Style="position: absolute" />
                                    <RadzenLengthValidator Component="Name" Max="100" Text="El nombre debe tener como máximo 100 caracteres." Popup=true Style="position: absolute" />
                                    <RadzenRequiredValidator Component="Name" Text="El Nombre es requerido" Popup=true Style="position: absolute" />
                                    @* <RadzenCustomValidator Component="Name" Validator="@(() => ValidateOnlyText(Employee.Name))" Text="El campo solo acepta texto" Popup=true /> *@
                            </RadzenColumn>
                        </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Otros Nombres" Component="OtherNames" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" Name="OtherNames" @bind-Value="Employee.OtherNames" />
                                    <RadzenLengthValidator Component="OtherNames" Max="100" Text="El campo debe tener como máximo 100 caracteres." Popup=true Style="position: absolute" />
                                    @* <RadzenCustomValidator Component="Name" Validator="@(() => ValidateOnlyText(Employee.Name))" Text="El campo solo acepta texto" Popup=true /> *@
                                </RadzenColumn>
                            </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Apellidos" Component="LastName" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenTextBox  Style="width: 100%;" Name="LastName" @bind-Value="Employee.LastName" />
                                    <RadzenLengthValidator Component="LastName" Min="3" Text="El campo debe tener al menos 5 caracteres." Popup=true Style="position: absolute" />
                                    <RadzenLengthValidator Component="LastName" Max="100" Text="El campo debe tener como máximo 100 caracteres." Popup=true Style="position: absolute" />
                                    <RadzenRequiredValidator Component="LastName" Text="El campo es requerido" Popup=true Style="position: absolute" />
                                </RadzenColumn>
                        </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Apellido de Casado/a" Component="MarriedName" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" Name="MarriedName" @bind-Value="Employee.MarriedName" />
                                    <RadzenLengthValidator Component="MarriedName" Max="100" Text="El campo debe tener como máximo 100 caracteres." Popup=true Style="position: absolute" />
                                    @* <RadzenCustomValidator Component="Name" Validator="@(() => ValidateOnlyText(Employee.Name))" Text="El campo solo acepta texto" Popup=true /> *@
                                </RadzenColumn>
                            </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Doc. Identificación" Component="Identification" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenTextBox  Style="width: 100%;" Name="Identification" @bind-Value="Employee.Identification" />
                                    <RadzenLengthValidator Component="Identification" Min="13" Text="La identificación debe tener al menos 13 caracteres." Popup=true Style="position: absolute" />
                                    <RadzenLengthValidator Component="Identification" Max="20" Text="La identificación debe tener como máximo 20 caracteres." Popup=true Style="position: absolute" />
                                    <RadzenRequiredValidator Component="Identification" Text="La identificación es requerida" Popup=true Style="position: absolute" />
                                </RadzenColumn>
                        </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Pasaporte" Component="Passport" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" Name="Passport" @bind-Value="Employee.Passport" />
                                    <RadzenLengthValidator Component="Passport" Min="13" Text="El campo debe tener al menos 13 caracteres." Popup=true Style="position: absolute" />
                                    <RadzenLengthValidator Component="Passport" Max="20" Text="El campo debe tener como máximo 20 caracteres." Popup=true Style="position: absolute" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="NIT" Component="NIT" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenNumeric Style="width: 100%;" Name="NIT" @bind-Value="Employee.NIT" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Dirección" Component="Adress" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenTextBox  Style="width: 100%;" Name="Adress" @bind-Value="Employee.Adress" />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Género" Component="Gender" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenDropDown  @bind-Value="Employee.Gender" Placeholder="Femenino" Data="@genders" Style="width: 100%;"
                                                TextProperty="GenderName" ValueProperty="GenderName" Name="Gender">
                                </RadzenDropDown>
                            </RadzenColumn>
                        </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Tipo Sangre" Component="BloodType" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" Name="BloodType" @bind-Value="Employee.BloodType" />
                                    <RadzenLengthValidator Component="BloodType" Min="1" Text="el campo debe tener al menos 1 caracter." Popup=true Style="position: absolute" />
                                    <RadzenLengthValidator Component="BloodType" Max="3" Text="el campo debe tener como máximo 3 caracteres." Popup=true Style="position: absolute" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Estado Civil" Component="MaritalStatusEmployee" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenDropDown  @bind-Value="Employee.MaritalStatus" Data="@MaritalStatus"
                                                    Style="width: 100%;" TextProperty="Status" ValueProperty="Status"
                                                    Name="MaritalStatusEmployee">
                                    </RadzenDropDown>
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Tipo de empleado" Component="TypeEmployee" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenDropDown  @bind-Value="Employee.TypeEmployee" Data="@EmployeeType"
                                                    Style="width: 100%;" TextProperty="Type" ValueProperty="Type"
                                                    Name="TypeEmployee">
                                    </RadzenDropDown>
                                </RadzenColumn>
                            </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Teléfono" Component="Phone" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenNumeric Style="width: 100%;" Name="Phone" @bind-Value="Employee.Phone" />
                            </RadzenColumn>
                        </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Teléfono Medico Privado" Component="PhonePrivateDoctor" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenNumeric Style="width: 100%;" Name="PhonePrivateDoctor" @bind-Value="Employee.PhonePrivateDoctor" />
                                </RadzenColumn>
                            </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Fecha de Nacimiento" Component="DateOfBirth" Style="margin-right: 8px; vertical-align: middle;" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">

                                <RadzenDatePicker @bind-Value="Employee.DateOfBirth" Name="DateOfBirth" ShowCalendarWeek />
                             </RadzenColumn>
                         </RadzenRow>
                            <RadzenRow>
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Sabe lenguaje de señas" Component="SignLanguage" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenSwitch Name="SignLanguage" @bind-Value="Employee.SignLanguage"
                                                  InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Switch value" }})" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Religión" Component="Religion" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" Name="Religion" @bind-Value="Employee.Religion" />
                                    <RadzenLengthValidator Component="Religion" Max="50" Text="el campo debe tener como máximo 50 caracteres." Popup=true Style="position: absolute" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Tiene una posicion Religiosa" Component="HasReligiousPosition" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenSwitch Name="HasReligiousPosition" @bind-Value="Employee.HasReligiousPosition"
                                                  InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Switch value" }})" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Cual es?" Component="ReligiousPosition" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" Name="ReligiousPosition" @bind-Value="Employee.ReligiousPosition" />
                                    <RadzenLengthValidator Component="ReligiousPosition" Max="50" Text="el campo debe tener como máximo 50 caracteres." Popup=true Style="position: absolute" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Pueblo" Component="Town" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" Name="Town" @bind-Value="Employee.Town" />
                                    <RadzenLengthValidator Component="Town" Max="50" Text="el campo debe tener como máximo 50 caracteres." Popup=true Style="position: absolute" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Comunidad Linguistica" Component="LinguisticCommunity" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" Name="LinguisticCommunity" @bind-Value="Employee.LinguisticCommunity" />
                                    <RadzenLengthValidator Component="LinguisticCommunity" Max="50" Text="el campo debe tener como máximo 50 caracteres." Popup=true Style="position: absolute" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="País" Component="Countries" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenDropDown @bind-Value="Employee.UuidCountry" Data="@Countries"
                                                    Style="width: 100%;" TextProperty="Name" ValueProperty="Uuid" Name="Countries">
                                    </RadzenDropDown>
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Departamento" Component="CountryDepartments" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenDropDown @bind-Value="Employee.UuidCountryDeparmet" Data="@CountryDepartments"
                                                    Style="width: 100%;" TextProperty="Name" ValueProperty="Uuid" Name="CountryDepartments">
                                    </RadzenDropDown>
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Municipalidad" Component="Municipalities" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenDropDown @bind-Value="Employee.UuidMunicipality" Data="@Municipalities"
                                                    Style="width: 100%;" TextProperty="Name" ValueProperty="Uuid" Name="Municipalities">
                                    </RadzenDropDown>
                                </RadzenColumn>
                            </RadzenRow>
                     </RadzenStack>
                 </RadzenFieldset>
             </RadzenStack>
         </RadzenColumn>
         <RadzenColumn Size="12" SizeMD="6">
             <RadzenStack>
                 <RadzenFieldset Text="Información para la Empresa">
                     <RadzenStack Gap="1rem">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Correo Institucional" Component="Email" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" Name="Email" @bind-Value="Employee.InstitutionalEmail" />
                                    <RadzenRequiredValidator Component="Email" Text="El correo es requerido" Popup=true Style="position: absolute" />
                                    <RadzenEmailValidator Component="Email" Text="Ingresa un correo valido" Popup=true Style="position: absolute" />
                                </RadzenColumn>
                            </RadzenRow>
                         <RadzenRow AlignItems="AlignItems.Center">
                             <RadzenColumn Size="12" SizeMD="4">
                                 <RadzenLabel Text="Correo Personal" Component="Email" />
                             </RadzenColumn>
                             <RadzenColumn Size="12" SizeMD="8">
                                 <RadzenTextBox  Style="width: 100%;" Name="Email" @bind-Value="Employee.Email" />
                             </RadzenColumn>
                         </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="No. Afiliación IGSS" Component="IgssAffiliation" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" Name="IgssAffiliation" @bind-Value="Employee.IgssAffiliation" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Profesión" Component="Profession" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" Name="Profession" @bind-Value="Employee.Profession" />
                                    <RadzenLengthValidator Component="Profession" Max="50" Text="el campo debe tener como máximo 50 caracteres." Popup=true Style="position: absolute" />
                                </RadzenColumn>
                            </RadzenRow>
                         <RadzenRow AlignItems="AlignItems.Center">
                             <RadzenColumn Size="12" SizeMD="4">
                                 <RadzenLabel Text="Departamento" Component="Department" />
                             </RadzenColumn>
                             <RadzenColumn Size="12" SizeMD="8">
                                     <RadzenDropDown Disabled="true" @bind-Value="Employee.UuidDepartment" Data="@departments" Style="width: 100%;"
                                                 TextProperty="Name" ValueProperty="Uuid" Name="Department">
                                 </RadzenDropDown>
                             </RadzenColumn>
                         </RadzenRow>
                         <RadzenRow AlignItems="AlignItems.Center">
                             <RadzenColumn Size="12" SizeMD="4">
                                 <RadzenLabel Text="Cargo" Component="JobTitles" />
                             </RadzenColumn>
                             <RadzenColumn Size="12" SizeMD="8">
                                 <RadzenDropDown Disabled="true" @bind-Value="Employee.UuidJobTitle" Data="@jobTitles" Style="width: 100%;"
                                                 TextProperty="Name" ValueProperty="Uuid" Name="JobTitles">
                                 </RadzenDropDown>
                             </RadzenColumn>
                         </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Salario" Component="Salary" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenNumeric Style="width: 100%;" Name="Salary" @bind-Value="Employee.EmployeeSalary" />
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Config. de pago" Component="Payment" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenDropDown @bind-Value="Employee.UuidPaymentConfiguration" Data="@paymentConfigurations"
                                                Style="width: 100%;" TextProperty="Description" ValueProperty="Uuid" Name="Payment">
                                </RadzenDropDown>
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Frecuencia de Pago" Component="PaymentFrequency" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenDropDown  @bind-Value="Employee.PaymentFrequency" Placeholder="Mensual" Data="@PaymentFrequencyTypes"
                                                Style="width: 100%;" TextProperty="PaymentFrequency" ValueProperty="PaymentFrequency"
                                                Name="PaymentFrequency">
                                </RadzenDropDown>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Gerente" Component="Manager" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenDropDown  @bind-Value="Employee.UuidManager" Data="@ListEmployees"
                                                Style="width: 100%;" TextProperty="Name" ValueProperty="Uuid" Name="Manager">
                                </RadzenDropDown>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Supervisor" Component="Supervisor" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenDropDown  @bind-Value="Employee.UuidSupervisor" Data="@ListEmployees"
                                                Style="width: 100%;" TextProperty="Name" ValueProperty="Uuid" Name="Supervisor">
                                </RadzenDropDown>
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Fecha de Ingreso" Component="InitDate" Style="margin-right: 8px; vertical-align: middle;" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                   <RadzenDatePicker  @bind-Value="Employee.InitDate" Name="InitDate" ShowCalendarWeek />
                            </RadzenColumn>
                        </RadzenRow>
                     </RadzenStack>
                 </RadzenFieldset>
             </RadzenStack>
         </RadzenColumn>
     </RadzenRow>
     <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
         <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Guardar" />
             <RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="arrow_back" Text="Regresar" Click="@ReturnMenu" />
     </RadzenStack>
 </RadzenTemplateForm>
</RadzenBody>
@code {
    [Parameter]
    public string uuid { get; set; }

    EmployeeEntity Employee = new EmployeeEntity();
    ICollection<EmployeeEntity> ListEmployees;
    private ICollection<DepartmentEntity> departments;
    private ICollection<JobTitleEntity> jobTitles;
    private ICollection<CountriesEntity> Countries;
    private ICollection<CountryDepartmentEntity> CountryDepartments;
    private ICollection<MunicipalityEntity> Municipalities;

    private string selectedCountryDepartment;
    private string selectedMunicipality;
    private string selectedUuidRole;
    private string selectedCountry;

    private ICollection<PaymentConfigurationEntity> paymentConfigurations;
    string? jwt = null;
    string? uuidUserLoged = null;

    List<dynamic> genders = new List<dynamic>()
    {
        new { GenderName = "Masculino" },
        new { GenderName = "Femenino" },
        new { GenderName = "Otro" },
    };

    List<dynamic> PaymentFrequencyTypes = new List<dynamic>()
    {
        new { PaymentFrequency = "Quincenal" },
        new { PaymentFrequency = "Mensual" }
    };

    List<dynamic> EmployeeType = new List<dynamic>()
    {
        new { Type = "Empleado/a" },
        new { Type = "Estudiante" },
        new { Type = "Aprendiz" },
        new { Type = "Contratista" },
        new { Type = "Independiente" },
    };

    List<dynamic> MaritalStatus = new List<dynamic>()
    {
        new { Status = "Casado/a" },
        new { Status = "Soltero/a" },
        new { Status = "Divorciado/a" },
        new { Status = "Unido/a" },
    };

    bool ValidateOnlyText(string value)
    {
        return value.All(char.IsLetter);
    }

    protected override async Task OnInitializedAsync()
    {
        StateHasChanged();
        await base.OnInitializedAsync();
        jwt = await LocalStorage.GetItemAsync<string>("jwt");
        uuidUserLoged = await LocalStorage.GetItemAsync<string>("uuidUser");

        if (!string.IsNullOrEmpty(jwt))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);

            HttpResponseMessage response = await Http.GetAsync("api/Catalogs/JobTitles");
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                jobTitles = JsonConvert.DeserializeObject<ICollection<JobTitleEntity>>(content);
                if (jobTitles == null)
                    showError();
            }

            response = await Http.GetAsync("api/Catalogs/Departments");
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                departments = JsonConvert.DeserializeObject<ICollection<DepartmentEntity>>(content);
                if (departments == null)
                    showError();
                
            }

            response = await Http.GetAsync("api/Catalogs/CountryDepartments");
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                CountryDepartments = JsonConvert.DeserializeObject<ICollection<CountryDepartmentEntity>>(content);
                if (CountryDepartments == null)
                    showError();
            }

            response = await Http.GetAsync("api/Catalogs/Countries");
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                Countries = JsonConvert.DeserializeObject<ICollection<CountriesEntity>>(content);
                if (Countries == null)
                    showError();
            }

            response = await Http.GetAsync("api/Catalogs/Municipality");
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                Municipalities = JsonConvert.DeserializeObject<ICollection<MunicipalityEntity>>(content);
                if (Municipalities == null)
                    showError();
            }

            response = await Http.GetAsync("api/Payments/GetPaymentConfigList");
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                paymentConfigurations = JsonConvert.DeserializeObject<ICollection<PaymentConfigurationEntity>>(content);
                if (paymentConfigurations == null)
                    showError();
            }

            response = await Http.PostAsJsonAsync("api/Employee/Get", new PayloadGeneric()
                {
                    Uuid = uuidUserLoged!,
                    payload = new
                    {
                        Uuid = this.uuid
                    }
                });
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                Employee = JsonConvert.DeserializeObject<EmployeeEntity>(content);
                if (Employee == null)
                    showError();
            }

            response = await Http.GetAsync("api/Employee/GetAll");
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                ListEmployees = JsonConvert.DeserializeObject<ICollection<EmployeeEntity>>(content);
                if (ListEmployees == null)
                    showError();
            }

        }
    }

    private void showError()
    {
        string messageInfo = $"Error al intentar obtener datos del servidor!";
        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = messageInfo,
                Duration = 4000
            });
    }

    private async Task Update(EmployeeEntity employee)
    {
        string? jwt = await LocalStorage.GetItemAsync<string>("jwt");
        string? uuidUserLoged = await LocalStorage.GetItemAsync<string>("uuidUser");

        if (employee != null && !string.IsNullOrEmpty(jwt))
        {
            employee.Picture = "...";
            employee.IsDeleted = false;
            employee.DateModify = DateTime.Now.Date;
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            HttpResponseMessage response = await Http.PostAsJsonAsync("api/Employee/Update", new PayloadGeneric()
                {
                    Uuid = uuidUserLoged!,
                    payload = employee
                });
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                EmployeeEntity? updatedEmployee = JsonConvert.DeserializeObject<EmployeeEntity>(content);
                if (updatedEmployee != null)
                {
                    showInfo("Se agrego la información con éxito");
                    ReturnMenu();
                }
            }
            else
            {
                showError("Perdón algo salio mal");
            }
        }
    }

    private void ReturnMenu()
    {
        NavigationManager.NavigateTo($"/employesgrid");
    }

    private void showError(string messageInfo = null)
    {
        if (string.IsNullOrEmpty(messageInfo))
            messageInfo = $"Error al intentar obtener datos del servidor!";

        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = messageInfo,
                Duration = 4000
            });
    }

    private void showInfo(string msg)
    {
        string messageInfo = msg;
        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Info,
                Summary = messageInfo,
                Duration = 4000
            });
    }
}
