@page "/CreateEmployes"
@using System.Net.Http.Headers
@using FE_HumanResources.Models
@using FE_HumanResources.Entities
@inject ILocalStorageService LocalStorage
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject HttpClient Http

<RadzenBody Gap="1rem" Class="rz-p-sm-12">
    <RadzenBreadCrumb>
        <Template Context="item">
            <RadzenBadge Text="@item.Text" IsPill="true" />
        </Template>
        <ChildContent>
            <RadzenBreadCrumbItem Path="/employesgrid" Text="Empleados" />
            <RadzenBreadCrumbItem Path="/CreateEmployes" Text="Crear Empleado" />
        </ChildContent>
    </RadzenBreadCrumb>
    <RadzenTemplateForm Data="@Employee" Submit="@((EmployeeEntity args) => { ValidateIsUser(); })">
        <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenStack>
                    <RadzenFieldset Text="Informacion de Empleado">
                        <RadzenStack Gap="1rem">

                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Nombres" Component="Name" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" Name="Name" @bind-Value="Employee.Name" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Apellidos" Component="LastName" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" Name="LastName"
                                        @bind-Value="Employee.LastName" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="DPI" Component="Identification" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" Name="Identification"
                                        @bind-Value="Employee.Identification" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Direcciï¿½n" Component="Adress" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" Name="Adress" @bind-Value="Employee.Adress" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Genero" Component="Gender" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenDropDown @bind-Value="Employee.Gender" Placeholder="Femenino" Data="@genders"
                                        Style="width: 100%;" TextProperty="GenderName" ValueProperty="GenderName"
                                        Name="Gender">
                                    </RadzenDropDown>
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Telefono" Component="Phone" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenNumeric Style="width: 100%;" Name="Phone" @bind-Value="Employee.Phone" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Fecha de Nacimiento" Component="DateOfBirth"
                                        Style="margin-right: 8px; vertical-align: middle;" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">

                                    <RadzenDatePicker @bind-Value="Employee.DateOfBirth" Name="DateOfBirth"
                                        ShowCalendarWeek />
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenFieldset>
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenStack>
                    <RadzenFieldset Text="Informacion para la Empresa">
                        <RadzenStack Gap="1rem">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Correo" Component="Email" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenTextBox Style="width: 100%;" Name="Email" @bind-Value="Employee.Email" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Departamento" Component="Department" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                     <RadzenDropDown @bind-Value="Employee.UuidDepartment" Data="@departments" 
                                        Change="@(args => OnDepartmentChanged(Employee.UuidDepartment))"
                                        Style="width: 100%;" TextProperty="Name" ValueProperty="Uuid" Name="Department" >
                                    </RadzenDropDown>
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Cargo" Component="JobTitles" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                     <RadzenDropDown @bind-Value="Employee.UuidJobTitle" Data="@filteredJobTitles"
                                        Style="width: 100%;" TextProperty="Name" ValueProperty="Uuid" Name="JobTitles">
                                    </RadzenDropDown>
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Es Usuario" Component="IsUser" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenSwitch Name="IsUser" @bind-Value="Employee.IsUSer"
                                        InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Switch value" }})" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Fecha de Ingreso" Component="InitDate"
                                        Style="margin-right: 8px; vertical-align: middle;" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">

                                    <RadzenDatePicker @bind-Value="Employee.InitDate" Name="InitDate"
                                        ShowCalendarWeek />
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenFieldset>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem"
            Class="rz-mt-8 rz-mb-4">
            <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Guardar" />
             <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="arrow_back"
                Text="Regresar" Click="@ReturnMenu" />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenBody>

 @code {
    EmployeeEntity Employee = new EmployeeEntity();
    private ICollection<DepartmentEntity> departments;
    private ICollection<JobTitleEntity> jobTitles;
    private ICollection<JobTitleEntity> filteredJobTitles;
    private ICollection<RoleEntity> roles;
    private string selectedUuidRole;
    private string selectedCountry;
    string? jwt = null;
    string? uuidUserLoged = null;

    List<dynamic> genders = new List<dynamic>()
    {
        new { GenderName = "Masculino" },
        new { GenderName = "Femenino" }
    };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        string? jwt = await LocalStorage.GetItemAsync<string>("jwt");
        string? uuidUserLoged = await LocalStorage.GetItemAsync<string>("uuidUser");

        if (!string.IsNullOrEmpty(jwt))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);

            HttpResponseMessage response = await Http.GetAsync("api/Catalogs/JobTitles");
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                jobTitles = JsonConvert.DeserializeObject<ICollection<JobTitleEntity>>(content);
                if (jobTitles == null)
                    showError();
            }

            response = await Http.GetAsync("api/Catalogs/Departments");
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                departments = JsonConvert.DeserializeObject<ICollection<DepartmentEntity>>(content);
                if (departments == null)
                    showError();
            }

            response = await Http.GetAsync("api/Catalogs/Roles");
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                roles = JsonConvert.DeserializeObject<ICollection<RoleEntity>>(content);
                if (roles == null)
                    showError();
            }

        }
    }

    void OnDepartmentChanged(string selectedDepartmentId)
    {
        if (!string.IsNullOrEmpty(selectedDepartmentId))
        {
            filteredJobTitles = jobTitles.Where(jt => jt.UuidDepartment == selectedDepartmentId).ToList();
            StateHasChanged();
        }
    }

    private async Task ShowInlineDialog()
    {
        var result = await DialogService.OpenAsync("InformaciÃ³n de Usuario", ds =>
        @<RadzenStack Gap="1.5rem">
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="Titulo" Component="Role" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="8">
                    <RadzenDropDown @bind-Value="@selectedUuidRole" Data="@roles" Style="width: 100%;"
                                    TextProperty="Name" ValueProperty="Uuid" Name="Role">
                    </RadzenDropDown>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="Pais" Component="selectedCountry" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="8">
                <RadzenTextBox Style="width: 100%;" Name="selectedCountry" @bind-Value="selectedCountry" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Ok" Click="@(async () => {  CreateEmploye(this.Employee); ds.Close(true); })" Style="width: 80px;" />
                    <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>
    );
    }

    private void ValidateIsUser()
    {
        if (this.Employee.IsUSer)
        {
            ShowInlineDialog();
        }
        else
        {
            CreateEmploye(this.Employee);
        }
    }
    private async Task CreateEmploye(EmployeeEntity employee)
    {
        string? jwt = await LocalStorage.GetItemAsync<string>("jwt");
        string? uuidUserLoged = await LocalStorage.GetItemAsync<string>("uuidUser");

        if (employee != null && !string.IsNullOrEmpty(jwt))
        {
            employee.Picture = "...";
            employee.IsDeleted = false;
            employee.DateModify = DateTime.Now.Date;
            employee.Uuid = "";

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            HttpResponseMessage response = await Http.PostAsJsonAsync("api/Employee/Create", new PayloadGeneric()
            {
                Uuid = uuidUserLoged!,
                payload = employee
            });
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                EmployeeEntity? createdEmployee = JsonConvert.DeserializeObject<EmployeeEntity>(content);
                if (createdEmployee != null)
                {
                    if (employee.IsUSer)
                    {
                        response = await Http.PostAsJsonAsync("api/User/CreateUser", new PayloadGeneric()
                        {
                            Uuid = uuidUserLoged!,
                            payload = new UserEntity()
                            {
                                Uuid = "",
                                UuidRole = selectedUuidRole,
                                UserName = createdEmployee.Name,
                                LastName = createdEmployee.LastName,
                                Identification = createdEmployee.Identification,
                                Adress = createdEmployee.Adress,
                                Gender = createdEmployee.Gender,
                                Phone = createdEmployee.Phone,
                                DateOfBirth = createdEmployee.DateOfBirth,
                                Email = createdEmployee.Email,
                                Password = "Pr0DiSa24*",
                                Active = true,
                                Picture = "...",
                                Country = selectedCountry,
                                DateModify = DateTime.Now.Date,
                                IsDeleted = false
                            }
                        });
                    }

                    if (response.IsSuccessStatusCode)
                    {
                        this.Employee = new EmployeeEntity();
                        showInfo("Se creo Empleado con Exito!");
                    }
                    else
                        showError("Perdon algo salio mal");

                }
            }
            else
            {
                showError("Perdon algo salio mal");
            }
        }
    }

    private void ReturnMenu()
    {
        NavigationManager.NavigateTo($"employesgrid", true);
    }

    private void showError(string messageInfo = null)
    {
        if (string.IsNullOrEmpty(messageInfo))
            messageInfo = $"Error al intentar obtener datos del servidor!";

        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = messageInfo,
                Duration = 4000
            });
    }

    private void showInfo(string msg)
    {
        string messageInfo = msg;
        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Info,
                Summary = messageInfo,
                Duration = 4000
            });
    }
}
