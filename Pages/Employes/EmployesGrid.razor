@page "/employesgrid"
@using System.Net.Http.Headers
@using FE_HumanResources.Models
@using FE_HumanResources.Entities
@inject ILocalStorageService LocalStorage
@inject ContextMenuService ContextMenuService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http

<RadzenBody Gap="1rem" Class="rz-p-sm-12">
    <RadzenBreadCrumb>
        <Template Context="item">
            <RadzenBadge Text="@item.Text" IsPill="true" />
        </Template>
        <ChildContent>
            <RadzenBreadCrumbItem Path="/" Text="Empleados" />
            <RadzenBreadCrumbItem Path="/usersgrid" Text="Lista de Empleados" />
        </ChildContent>
    </RadzenBreadCrumb>
    <br />
    @if (MenuActions.Where(w => w.Name == "Crear").FirstOrDefault().Allowed == true)
    {
        <RadzenButton Text="Crear" Click="@Create" ButtonStyle="ButtonStyle.Primary" />
    }
    <RadzenButton Text="Refrescar Lista" Click="@Reset" ButtonStyle="ButtonStyle.Secondary" />
    <br />
    <br />
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                    AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@EmployeeEntity" TItem="EmployeeEntity" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or"
                    SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedEmployee CellContextMenu="@OnCellContextMenu"
                    FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
        <Columns>
            <RadzenDataGridColumn TItem="EmployeeEntity" Property="Name" Title="Nombre" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="EmployeeEntity" Property="LastName" Title="Apellido" Frozen="true" Width="160px" />
            <RadzenDataGridColumn TItem="EmployeeEntity" Property="Identification" Title="Identificación" Width="160px" />
            <RadzenDataGridColumn TItem="EmployeeEntity" Property="Phone" Title="teléfono" FormatString="{0:d}" Width="200px" />
            <RadzenDataGridColumn TItem="EmployeeEntity" Property="Email" Title="Correo" Width="300px" />
        </Columns>
    </RadzenDataGrid>
</RadzenBody>


@code {
    private EmployeeEntity user = new EmployeeEntity();
    private IEnumerable<EmployeeEntity> EmployeeEntity;
    private IList<EmployeeEntity> selectedEmployee;

    private string uuidRole;
    private IEnumerable<MenuEntity> MenuEntities;
    List<MenuActionsEntity> MenuActions;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Reset();
    }

    private async Task Reset()
    {
        string? jwt = await LocalStorage.GetItemAsync<string>("jwt");
        uuidRole = await LocalStorage.GetItemAsync<string>("uuidRole");

        string permiss = await LocalStorage.GetItemAsync<string>("Permissions");

        if (!string.IsNullOrEmpty(permiss))
        {
            MenuEntities = JsonConvert.DeserializeObject<IEnumerable<MenuEntity>>(permiss);

            MenuActions = MenuEntities.Where(w => w.Name == "Empleados").FirstOrDefault()
                        .SubMenus.Where(z => z.Name == "Lista de Empleados").FirstOrDefault().MenuActions.ToList();
        }

        if (!string.IsNullOrEmpty(jwt))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            HttpResponseMessage response = await Http.GetAsync("api/Employee/GetAll");
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                EmployeeEntity = JsonConvert.DeserializeObject<IEnumerable<EmployeeEntity>>(content);
                if (EmployeeEntity == null)
                {
                    showError("Error al cargar Empleados");

                }
                else
                {
                    selectedEmployee = EmployeeEntity.Take(1).ToList();
                }
            }
            else
            {
                await LocalStorage.ClearAsync();
                NavigationManager.NavigateTo("login", true);
            }
        }
        else
        {
            await LocalStorage.ClearAsync();
            NavigationManager.NavigateTo("login", true);
        }
    }

    void Create()
    {
        NavigationManager.NavigateTo($"/CreateEmployes");
    }

    async Task OnCellContextMenu(DataGridCellMouseEventArgs<EmployeeEntity> args)
    {
        selectedEmployee = new List<EmployeeEntity>() { args.Data };

        var contextMenuItems = new List<ContextMenuItem>();

        foreach (MenuActionsEntity e in MenuActions.Where(w => w.Allowed == true && w.Name != "Crear").ToList().OrderBy(o => o.Order))
        {
            contextMenuItems.Insert(0, new ContextMenuItem() { Text = e.Name, Value = e.Value, Icon = e.Icon });
        }

        ContextMenuService.Open(args,
            contextMenuItems,
            (e) =>
            {
                if (e.Value.ToString() == "1")
                {

                }
                else if (e.Value.ToString() == "2")
                {
                    NavigationManager.NavigateTo($"employee/{args.Data.Uuid}");
                }
                else if (e.Value.ToString() == "4")
                {
                    NavigationManager.NavigateTo($"historicEmployee/{args.Data.Uuid}-{args.Data.Name}");
                }
                else if (e.Value.ToString() == "3")
                {
                    
                }
            }
         );
    }

    private void showError(string messageInfo = null)
    {
        if (string.IsNullOrEmpty(messageInfo))
            messageInfo = $"Error al intentar obtener datos del servidor!";

        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = messageInfo,
                Duration = 4000
            });
    }

    private void showInfo(string msg)
    {
        string messageInfo = msg;
        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Info,
                Summary = messageInfo,
                Duration = 4000
            });
    }
}
