@page "/employesgrid"
@using System.Net.Http.Headers
@using FE_HumanResources.Models
@using FE_HumanResources.Entities
@inject ILocalStorageService LocalStorage
@inject ContextMenuService ContextMenuService
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http

<RadzenBody Gap="1rem" Class="rz-p-sm-12">
    <RadzenBreadCrumb>
        <Template Context="item">
            <RadzenBadge Text="@item.Text" IsPill="true" />
        </Template>
        <ChildContent>
            <RadzenBreadCrumbItem Path="/" Text="Empleados" />
            <RadzenBreadCrumbItem Path="/usersgrid" Text="Lista de Empleados" />
        </ChildContent>
    </RadzenBreadCrumb>
    <br />
    <RadzenButton Text="Actualizar" Click="@Reset" Style="margin-bottom: 20px;" />
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                    AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@EmployeeEntity" TItem="EmployeeEntity" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or"
                    SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedEmployee CellContextMenu="@OnCellContextMenu"
                    FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
        <Columns>
            <RadzenDataGridColumn TItem="EmployeeEntity" Property="Name" Title="Nombre" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="EmployeeEntity" Property="LastName" Title="Apellido" Frozen="true" Width="160px" />
            <RadzenDataGridColumn TItem="EmployeeEntity" Property="Identification" Title="Identificación" Width="160px" />
            <RadzenDataGridColumn TItem="EmployeeEntity" Property="Phone" Title="teléfono" FormatString="{0:d}" Width="200px" />
            <RadzenDataGridColumn TItem="EmployeeEntity" Property="Email" Title="Correo" Width="300px" />
        </Columns>
    </RadzenDataGrid>
</RadzenBody>


@code {
    private EmployeeEntity user = new EmployeeEntity();
    private IEnumerable<EmployeeEntity> EmployeeEntity;
    private IList<EmployeeEntity> selectedEmployee;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Reset();
    }

    private async Task Reset()
    {
        string? jwt = await LocalStorage.GetItemAsync<string>("jwt");
        if (!string.IsNullOrEmpty(jwt))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            HttpResponseMessage response = await Http.GetAsync("api/Employee/GetAll");
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                EmployeeEntity = JsonConvert.DeserializeObject<IEnumerable<EmployeeEntity>>(content);
                if (EmployeeEntity == null)
                {
                    showError("Error al cargar Empleados");

                }
                else
                {
                    selectedEmployee = EmployeeEntity.Take(1).ToList();
                }
            }
            else
            {
                await LocalStorage.ClearAsync();
                NavigationManager.NavigateTo("login", true);
            }
        }
        else
        {
            await LocalStorage.ClearAsync();
            NavigationManager.NavigateTo("login", true);
        }
    }

    async Task OnCellContextMenu(DataGridCellMouseEventArgs<EmployeeEntity> args)
    {
        selectedEmployee = new List<EmployeeEntity>() { args.Data };
        
        var contextMenuItems = new List<ContextMenuItem>
        {
            new ContextMenuItem() { Text = "Ver", Value = 4, Icon = "visibility" }
        };

        if (await UserIsInRole("0A8A30E0-1793-4C2A-95B3-A8AB44D9D23F") || await UserIsInRole("1A60AA0C-4DE7-4964-AF65-92409A85788E") || await UserIsInRole("637D8DF2-4E4F-4CB8-B0F9-B12C66A6C364"))
        {
            contextMenuItems.Insert(0, new ContextMenuItem() { Text = "Editar", Value = 1, Icon = "search" });

        }
        if (await UserIsInRole("1A60AA0C-4DE7-4964-AF65-92409A85788E") || await UserIsInRole("637D8DF2-4E4F-4CB8-B0F9-B12C66A6C364"))
        {
            contextMenuItems.Insert(0, new ContextMenuItem() { Text = "Ver Histórico del Registro", Value = 2, Icon = "home" });
            contextMenuItems.Insert(0, new ContextMenuItem() { Text = "Ver Pagos", Value = 3, Icon = "account_balance_wallet" });
            contextMenuItems.Insert(0, new ContextMenuItem() { Text = "Eliminar", Value = 4, Icon = "info" });
        }

        ContextMenuService.Open(args,
            contextMenuItems,
            (e) =>
            {
                if (e.Value.ToString() == "1")
                {
                    NavigationManager.NavigateTo($"employee/{args.Data.Uuid}");
                }
                else if (e.Value.ToString() == "2")
                {
                    NavigationManager.NavigateTo($"historicEmployee/{args.Data.Uuid}-{args.Data.Name}");
                }
                else if (e.Value.ToString() == "4")
                {
                    NavigationManager.NavigateTo($"/employee/{args.Data.Uuid}");
                }
            }
         );
    }

    private async Task<bool> UserIsInRole(string uuidRole)
    {
        // Implementa la lógica para verificar si el usuario actual pertenece a un rol específico
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.IsInRole(uuidRole);
    }

    private void showError(string messageInfo = null)
    {
        if (string.IsNullOrEmpty(messageInfo))
            messageInfo = $"Error al intentar obtener datos del servidor!";

        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = messageInfo,
                Duration = 4000
            });
    }

    private void showInfo(string msg)
    {
        string messageInfo = msg;
        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Info,
                Summary = messageInfo,
                Duration = 4000
            });
    }
}
