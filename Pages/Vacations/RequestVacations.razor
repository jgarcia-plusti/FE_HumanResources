@page "/RequestVacations"
@using System.Net.Http.Headers
@using FE_HumanResources.Models
@using FE_HumanResources.Entities
@inject ILocalStorageService LocalStorage
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject HttpClient Http


<RadzenBody Gap="1rem" Class="rz-p-sm-12" Style="height:100vh; overflow-y:auto;">
    <RadzenBreadCrumb>
        <Template Context="item">
            <RadzenBadge Text="@item.Text" IsPill="true" />
        </Template>
        <ChildContent>
            <RadzenBreadCrumbItem Path="/" Text="Vacaciones" />
            <RadzenBreadCrumbItem Path="/RequestVacations" Text="Solicitar Vacaciones" />
        </ChildContent>
    </RadzenBreadCrumb>

    <RadzenTemplateForm Data="@vacationsEntity" Submit="@((VacationsEntity args) => { CreateVacationsSolisiting(args); })">
        <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
            <RadzenColumn Size="12" SizeMD="12">
                <RadzenStack>
                    
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="12">
                <RadzenStack>
                    <RadzenFieldset Text="*">
                        <RadzenStack Gap="1rem">

                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Fecha de Inicio" Component="InitDate" Style="margin-right: 8px; vertical-align: middle;" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenDatePicker @bind-Value="vacationsEntity.InitDate" Name="InitDate" ShowCalendarWeek />
                                 </RadzenColumn>
                             </RadzenRow>

                             <RadzenRow AlignItems="AlignItems.Center">
                                 <RadzenColumn Size="12" SizeMD="4">
                                     <RadzenLabel Text="Fecha de Finalización" Component="EndDate" Style="margin-right: 8px; vertical-align: middle;" />
                                 </RadzenColumn>
                                 <RadzenColumn Size="12" SizeMD="8">
                                     <RadzenDatePicker @bind-Value="vacationsEntity.EndDate" Name="EndDate" ShowCalendarWeek />
                                 </RadzenColumn>
                             </RadzenRow>

                             <RadzenHtmlEditor @bind-Value="vacationsEntity.Description" style="height: 300px;" Input=@OnInput Change=@OnChange Paste=@OnPaste Execute=@OnExecute UploadUrl="upload/image" />

                        </RadzenStack>
                    </RadzenFieldset>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem"
                     Class="rz-mt-8 rz-mb-4">
            <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Guardar" />
            <RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="arrow_back"
                          Text="Regresar" Click="@ReturnMenu" />
        </RadzenStack>
    </RadzenTemplateForm>

</RadzenBody>

 @code {
    private VacationsEntity vacationsEntity = new VacationsEntity();
    private ICollection<EmployeeEntity> employeeEntities;
    private ICollection<EmployeeEntity> EmployeeVacationApplicant;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        string? jwt = await LocalStorage.GetItemAsync<string>("jwt");
        string loggedUser = await LocalStorage.GetItemAsync<string>("logedUser");
        UserEntity user = JsonConvert.DeserializeObject<UserEntity>(loggedUser);

        if (!string.IsNullOrEmpty(jwt))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            HttpResponseMessage response = await Http.GetAsync("api/Employee/GetAll");
            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                employeeEntities = JsonConvert.DeserializeObject<ICollection<EmployeeEntity>>(content);
                if (employeeEntities == null)
                    showError();
                else
                {
                    EmployeeVacationApplicant = employeeEntities.Where(w => w.Uuid == user.UuidEmployee).ToList();
                }
            }

        }
    }

    private async void CreateVacationsSolisiting(VacationsEntity vacation)
    {
        string? jwt = await LocalStorage.GetItemAsync<string>("jwt");
        string? uuidUserLoged = await LocalStorage.GetItemAsync<string>("uuidUser");
        string loggedUser = await LocalStorage.GetItemAsync<string>("logedUser");
        UserEntity user = JsonConvert.DeserializeObject<UserEntity>(loggedUser);

        if (vacation != null && !string.IsNullOrEmpty(jwt))
        {

            vacation.DateModify = DateTime.Now;
            vacation.State = "En Proceso";
            vacation.IsDeleted = false;
            vacation.Type = "Anual";

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            HttpResponseMessage response = await Http.PostAsJsonAsync("api/Vacation/CreateVacation", new PayloadGeneric()
            {
                Uuid = uuidUserLoged!,
                payload = vacation,
            });

            if (response.IsSuccessStatusCode)
            {
                vacationsEntity = new VacationsEntity();
                showInfo("Se agrego la información con éxito");
                StateHasChanged();
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                showError("Perdon algo salio mal");
            }
        }
    }

    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        
    }

    void OnChange(string html)
    {
        
    }

    void OnInput(string html)
    {
        
    }

    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
        
    }

    private void ReturnMenu()
    {
        NavigationManager.NavigateTo($"dashboard", true);
    }

    private void showError(string messageInfo = null)
    {
        if (string.IsNullOrEmpty(messageInfo))
            messageInfo = $"Error al intentar obtener datos del servidor!";

        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = messageInfo,
                Duration = 4000
            });
    }

    private void showInfo(string msg)
    {
        string messageInfo = msg;
        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Info,
                Summary = messageInfo,
                Duration = 4000
            });
    }
}
