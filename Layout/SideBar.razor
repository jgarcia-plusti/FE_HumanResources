@using FE_HumanResources.Entities
@using FE_HumanResources.Models
@inject ILocalStorageService LocalStorage
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject HttpClient Http

@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Routing;
@using System;
@using System.Linq;
@using System.Collections.Generic;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.JSInterop;
@using System.Net.Http.Headers

    <RadzenPanelMenu DisplayStyle="@DisplayStyle" ShowArrow="@isShowArrow" Multiple=false
        @onmouseover="@(args => { if(changeOnOver) { DisplayStyle = MenuItemDisplayStyle.IconAndText; } })"
        @onmouseout="@(args => { if(changeOnOver) { DisplayStyle = MenuItemDisplayStyle.Icon; } })">
        @* HOME *@
        @foreach (MenuEntity menu in MenuEntities.OrderBy(o=> o.Order))
        {
            <RadzenPanelMenuItem Text="@menu.Name" Icon="@menu.Icon">
                @foreach (SubMenuEntity subMenu in menu.SubMenus.OrderBy(o => o.Order))
                {
                    <RadzenPanelMenuItem Text="@subMenu.Name" Path="@subMenu.Path" Icon="@subMenu.Icon"></RadzenPanelMenuItem>
                }
            </RadzenPanelMenuItem>
        }
    </RadzenPanelMenu>
@code {
    private UserEntity UserEntity = null;
    private IEnumerable<MenuEntity> MenuEntities;
    string username = "";

    bool multiple = true;

    MenuItemDisplayStyle DisplayStyle = MenuItemDisplayStyle.IconAndText;

    bool isShowArrow = true;
    bool changeOnOver;

    protected override async Task OnInitializedAsync()
    {

        string? jwt = await LocalStorage.GetItemAsync<string>("jwt");
        if (!string.IsNullOrEmpty(jwt))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            HttpResponseMessage response = await Http.GetAsync("api/Menu/GetAll");

            if (response.IsSuccessStatusCode)
            {
                string content = response.Content.ReadAsStringAsync().Result;
                MenuEntities = JsonConvert.DeserializeObject<IEnumerable<MenuEntity>>(content);
                if (MenuEntities != null)
                    showInfo("Configuración cargada");
                else
                    showError("Perdón Algo salio mal");

            }
        }

        UserEntity = null;
        string? usr = await LocalStorage.GetItemAsync<string>("logedUser");

        if (!string.IsNullOrEmpty(usr))
        {
            UserEntity = JsonConvert.DeserializeObject<UserEntity>(usr);
            username = UserEntity.UserName + " " + UserEntity.LastName;
        }
        else
        {
            NavigationManager.NavigateTo("login", true);
        }
    }

    private async void logout()
    {
        string? usr = await LocalStorage.GetItemAsync<string>("logedUser");
        if (!string.IsNullOrEmpty(usr))
        {
            UserEntity = JsonConvert.DeserializeObject<UserEntity>(usr);
            if (UserEntity != null)
            {
                HttpResponseMessage response = await Http.PostAsJsonAsync("api/login/Out", new PayloadGeneric()
                {
                    Uuid = UserEntity.Uuid,
                    payload = new { }
                });

                if (response.IsSuccessStatusCode)
                {
                    await LocalStorage.ClearAsync();
                    NavigationManager.NavigateTo("login", true);

                }
                else
                {
                    
                }
            }
        }

    }

    private void showError(string messageInfo = null)
    {
        if (string.IsNullOrEmpty(messageInfo))
            messageInfo = $"Perdon algo salio mal!";

        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = messageInfo,
                Duration = 4000
            });
    }

    private void showInfo(string msg)
    {
        string messageInfo = msg;
        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Info,
                Summary = messageInfo,
                Duration = 4000
            });
    }


}