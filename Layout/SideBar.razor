@using FE_HumanResources.Entities
@using FE_HumanResources.Models
@inject ILocalStorageService LocalStorage
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject HttpClient Http

@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Routing;
@using System;
@using System.Linq;
@using System.Collections.Generic;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.JSInterop;
@using System.Net.Http.Headers

    <RadzenPanelMenu DisplayStyle="@DisplayStyle" ShowArrow="@isShowArrow" Multiple=false
        @onmouseover="@(args => { if(changeOnOver) { DisplayStyle = MenuItemDisplayStyle.IconAndText; } })"
        @onmouseout="@(args => { if(changeOnOver) { DisplayStyle = MenuItemDisplayStyle.Icon; } })">
        @* HOME *@
        @foreach (MenuEntity menu in MenuEntities.Where(w => w.Allowed == true).OrderBy(o=> o.Order))
        {
            <RadzenPanelMenuItem Text="@menu.Name" Icon="@menu.Icon">
            @foreach (SubMenuEntity subMenu in menu.SubMenus.Where(w => w.Allowed == true).OrderBy(o => o.Order))
            {
                <RadzenPanelMenuItem Text="@subMenu.Name" Path="@subMenu.Path" Icon="@subMenu.Icon"></RadzenPanelMenuItem>
            }
            </RadzenPanelMenuItem>
        }
    </RadzenPanelMenu>
@code {
    private UserEntity UserEntity = null;
    private IEnumerable<MenuEntity> MenuEntities;
    private NewRolePermissions newRolePermissions;
    string username = "";

    bool multiple = true;

    MenuItemDisplayStyle DisplayStyle = MenuItemDisplayStyle.IconAndText;

    bool isShowArrow = true;
    bool changeOnOver;

    protected override async Task OnInitializedAsync()
    {

        string? jwt = await LocalStorage.GetItemAsync<string>("jwt");
        string? uuidRole = await LocalStorage.GetItemAsync<string>("uuidRole");
        if (!string.IsNullOrEmpty(jwt))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
            HttpResponseMessage response = await Http.PostAsJsonAsync("api/Permissions/Get", new PayloadGeneric()
            {
                Uuid = uuidRole,
                payload = new { }
            });

            if (response.IsSuccessStatusCode)
            {
                string content = await response.Content.ReadAsStringAsync(); // Cambiado a await para leer el contenido asincrónicamente
                newRolePermissions = JsonConvert.DeserializeObject<NewRolePermissions>(content);
                if (newRolePermissions == null)
                    showError("Perdón Algo salio mal");
                else
                {

                    MenuEntities = newRolePermissions.Permissions.Select(s => new MenuEntity()
                    {
                        Uuid = s.Uuid,
                        UuidMenu = s.UuidMenu,
                        Allowed = s.Allowed,
                        Name = s.Name,
                        Description = s.Description,
                        Icon = s.Icon,
                        Order = s.Order,
                        SubMenus = s.PermissionsSubMenus.Select(sm => new SubMenuEntity()
                        {
                            Uuid = sm.Uuid,
                            UuidSubMenu = sm.UuidSubMenu,
                            UuidMenu = sm.UuidMenu,
                            Allowed = sm.Allowed,
                            Name = sm.Name,
                            Description = sm.Description,
                            Icon = sm.Icon,
                            Order = sm.Order,
                            Path = sm.Path,
                            MenuActions = sm.PermissionsMenuActions.Select(ma => new MenuActionsEntity()
                            {
                                Uuid = ma.Uuid,
                                UuidMenuActions = ma.UuidMenuActions,
                                UuidSubMenu = ma.UuidSubMenu,
                                Allowed = ma.Allowed,
                                Name = ma.Name,
                                Description = ma.Description,
                                Icon = ma.Icon,
                                Order = ma.Order,
                                Value = ma.Value
                            }).ToList()
                        }).ToList()
                    }).ToList();

                    if (!string.IsNullOrEmpty(await LocalStorage.GetItemAsync<string>("Permissions")))
                        LocalStorage.RemoveItemAsync("Permissions");

                    await LocalStorage.SetItemAsStringAsync("Permissions", JsonConvert.SerializeObject(MenuEntities));
                }
            }
        }

        UserEntity = null;
        string? usr = await LocalStorage.GetItemAsync<string>("logedUser");

        if (!string.IsNullOrEmpty(usr))
        {
            UserEntity = JsonConvert.DeserializeObject<UserEntity>(usr);
            username = UserEntity.UserName + " " + UserEntity.LastName;
        }
        else
        {
            NavigationManager.NavigateTo("login", true);
        }
    }

    private async void logout()
    {
        string? usr = await LocalStorage.GetItemAsync<string>("logedUser");
        if (!string.IsNullOrEmpty(usr))
        {
            UserEntity = JsonConvert.DeserializeObject<UserEntity>(usr);
            if (UserEntity != null)
            {
                HttpResponseMessage response = await Http.PostAsJsonAsync("api/login/Out", new PayloadGeneric()
                {
                    Uuid = UserEntity.Uuid,
                    payload = new { }
                });

                if (response.IsSuccessStatusCode)
                {
                    await LocalStorage.ClearAsync();
                    NavigationManager.NavigateTo("login", true);

                }
                else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    await LocalStorage.ClearAsync();
                    NavigationManager.NavigateTo("login", true);
                }
            }
        }

    }

    private void showError(string messageInfo = null)
    {
        if (string.IsNullOrEmpty(messageInfo))
            messageInfo = $"Perdon algo salio mal!";

        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = messageInfo,
                Duration = 4000
            });
    }

    private void showInfo(string msg)
    {
        string messageInfo = msg;
        NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Info,
                Summary = messageInfo,
                Duration = 4000
            });
    }


}